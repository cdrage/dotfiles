snippet e2etest "odo e2e test"
  It("${1}", func() {
    runCmd("${2}")
    getDc := runCmd("oc get dc foobar-" + appTestName + " -o go-template='" +
      "{{range .spec.template.spec.initContainers}}" +
      "{{.name}}{{end}}'")
    Expect(getDc).NotTo(ContainSubstring(foobar))
  })


snippet occlient_test "occlient test"
  func Test${1}(t *testing.T) {
    type args struct {
      foo  string
      bar  string
		  //dc   *appsv1.DeploymentConfig
    }
    tests := []struct {
      name    string
      args    args
      wantErr bool
    }{
      {
        name:    "foobar",
        args: args{},
        wantErr: false,
      },
    }
    for _, tt := range tests {
      t.Run(tt.name, func(t *testing.T) {
        fakeClient, fakeClientSet := FakeNew()

        // Fake Client examples
        /*
        fakeClientSet.Kubernetes.PrependReactor("delete", "persistentvolumeclaims", func(action ktesting.Action) (bool, runtime.Object, error) {
          return true, nil, nil
        })
        err := fakeClient.DeletePVC(tt.pvcName)
        fakeClientSet.AppsClientset.PrependReactor("get", "deploymentconfigs", func(action ktesting.Action) (bool, runtime.Object, error) {
				return true, tt.dcBefore, nil
        })
        */

        // Error checking examples
        /*
        // Checks for error in positive cases
        if !tt.wantErr == (err != nil) {
          t.Errorf(" client.DeletePVC(name) unexpected error %v, wantErr %v", err, tt.wantErr)
        }

        // Check for validating actions performed
        if (len(fakeClientSet.Kubernetes.Actions()) != 1) && (tt.wantErr != true) {
          t.Errorf("expected 1 action in DeletePVC got: %v", fakeClientSet.Kubernetes.Actions())
        }
        */

      })
    }
  }

  
