snippet k8s_service "service" b
apiVersion: v1
kind: Service
metadata:
	name: ${1}
	labels:
		app.kubernetes.io/name: $1
		app.kubernetes.io/instance: $1
		app.kubernetes.io/managed-by: ${2}
spec:
	type: ClusterIP
	publishNotReadyAddresses: false
	ports:
		- port: ${3}
			targetPort: $3
	selector:
		app.kubernetes.io/name: $1
		app.kubernetes.io/instance: $1
endsnippet

snippet k8s_ingress_with_production_lets_encrypt "ingress with lets encrypt" b
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
	name: ${1}
	labels:
		app.kubernetes.io/name: $1
		app.kubernetes.io/instance: $1
		app.kubernetes.io/managed-by: ${2}
	annotations:
		# Nginx
		nginx.org/websocket-services: $1
		nginx.ingress.kubernetes.io/rewrite-target: /
		nginx.ingress.kubernetes.io/ssl-redirect: "true"
		nginx.ingress.kubernetes.io/use-regex: "true"

		# Let's Encrypt
		cert-manager.io/cluster-issuer: letsencrypt-production
		ingress.kubernetes.io/ssl-redirect: "true"
		kubernetes.io/tls-acme: "true"
spec:
	tls:
	- hosts:
		- ${3}
		secretName: $3
	rules:
		- host: "$3"
			http:
				paths:
					- path: "/"
						pathType: Prefix
						backend:
							service:
								name: $1
								port:
									number: ${4}
endsnippet

snippet k8s_ingress "normal ingress" b
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
	name: ${1}
	labels:
		app.kubernetes.io/name: $1
		app.kubernetes.io/instance: $1
		app.kubernetes.io/managed-by: ${2}
spec:
	rules:
		- host: "${3}"
			http:
				paths:
					- path: "/"
						pathType: Prefix
						backend:
							service:
								name: $1
								port:
									number: ${4}
endsnippet

snippet k8s_ingress_with_production_lets_encrypt "ingress" b
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
	name: ${1}
	labels:
		app.kubernetes.io/name: $1
		app.kubernetes.io/instance: $1
		app.kubernetes.io/managed-by: ${2}
	annotations:
		# Nginx
		nginx.org/websocket-services: $1
		nginx.ingress.kubernetes.io/rewrite-target: /
		nginx.ingress.kubernetes.io/ssl-redirect: "true"
		nginx.ingress.kubernetes.io/use-regex: "true"

		# Let's Encrypt
		cert-manager.io/cluster-issuer: letsencrypt-production
		ingress.kubernetes.io/ssl-redirect: "true"
		kubernetes.io/tls-acme: "true"
spec:
	tls:
	- hosts:
		- ${3}
		secretName: $3
	rules:
		- host: "$3"
			http:
				paths:
					- path: "/"
						pathType: Prefix
						backend:
							service:
								name: $1
								port:
									number: ${4}
endsnippet

snippet k8s_deployment_with_pvc "deployment" b
apiVersion: apps/v1
kind: Deployment
metadata:
	name: $1
	labels:
		app.kubernetes.io/name:$1
		app.kubernetes.io/instance: $1
		app.kubernetes.io/managed-by: ${2}
spec:
	replicas: 1
	strategy:
		type: Recreate
	selector:
		matchLabels:
			app.kubernetes.io/name: $1
			app.kubernetes.io/instance: $1
	template:
		metadata:
			labels:
				app.kubernetes.io/name: $1
				app.kubernetes.io/instance: $1
		spec:
			# initContainers:
			containers:
				- name: $1
					image: "${3}"
					imagePullPolicy: IfNotPresent
					ports:
						- name: ${4}
							containerPort: ${5}
							protocol: TCP
					# "Extra" stuff not really needed, but sometimes needed..
					# env:
					# - name: FOO
					#		value: BAR
					# 
					# command: ["echo"]
					# args: ["$(GREETING) $(HONORIFIC) $(NAME)"]
					# args: 
					#		- --foo
					#		- --bar
					livenessProbe:
						httpGet:
							path: /
							port: $4
							scheme: HTTP
						initialDelaySeconds: 60
						failureThreshold: 5
						timeoutSeconds: 10
					readinessProbe:
						httpGet:
							path: /
							port: $4
							scheme: HTTP
						initialDelaySeconds: 60
						failureThreshold: 5
						timeoutSeconds: 10
					volumeMounts:
					- mountPath: /${6}
						name: ${7}
			volumes:
			- name: $7
				persistentVolumeClaim:
					claimName: $7-pvc
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
	name: $7-pvc
	labels:
		app.kubernetes.io/name: $1
		app.kubernetes.io/instance: $1
		app.kubernetes.io/managed-by: $2
spec:
	accessModes:
		- "ReadWriteOnce"
	resources:
		requests:
			storage: "10Gi"
endsnippet
