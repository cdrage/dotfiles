#!/bin/bash

########## 
# EXPORT #
########## 

# The best editor yo
export EDITOR=vim

# HIDPI for GTK apps
export GDK_SCALE=2
export GDK_DPI_SCALE=1
export QT_DEVICE_PIXEL_RATIO=2

# UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# History
export HISTSIZE=50000000
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=ignoredups
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"

# Tmux
[[ $TMUX = "" ]] && export TERM="xterm-256color"

# Dropbox
export DPATH=$HOME/dropbox

# Go
export GOPATH=$DPATH/dev/go
export GOBIN=$GOPATH/bin
export PATH=/usr/local/bin:/usr/local/go/bin:$PATH:$GOPATH/bin:/sbin

# Rust
export PATH="$HOME/.cargo/bin:$PATH"

###########
# ALIASES #
###########

alias todo="vim $DPATH/txt/todo.txt"
alias notes="vim $DPATH/txt/notes.txt"

# Easier navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"

# Shortcuts
alias g="git"
alias d=gogo # d for dev :)

# ls stuff
colorflag="--color"
alias l="ls -lF ${colorflag}"
alias la="ls -laF ${colorflag}"
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"
alias ls="command ls ${colorflag}"
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# Other
alias sudo='sudo '
alias week='date +%V'
alias pubip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"
alias ips="sudo ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
alias hosts='sudo vim /etc/hosts'
alias untar='tar xvf'
alias battery='upower -i /org/freedesktop/UPower/devices/battery_BAT0'
alias dl-a='youtube-dl -x -f bestaudio --prefer-free-formats -i --output "%(title)s.%(ext)s"'

#############
# FUNCTIONS #
#############

shout() {
  echo ""
  echo "=========="
  echo $1
  echo "=========="
  echo ""
}

ask() {
    # http://djm.me/ask
    local prompt default REPLY

    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo "====="
        echo -n "$1"
        echo -n "[$prompt]"
        echo ""
        echo "====="

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read REPLY </dev/tty

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
    echo ""
}

twitch() {
  local result=$1
  if [ -n "$2" ]
  then
    local quality=$2
  else
    local quality="high"
  fi
  streamlink twitch.tv/$1 $quality
}

digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

xkcd() {
  shuf -n5 /usr/share/dict/words | sed -e ':a;N;$!ba;s/\n/ /g;s/'\''//g;s/\b\(.\)/\u\1/g;s/ //g'
}

gogo() {
  if [[ $1 == *'/'* ]]; then
    local devpath=`find $DPATH/dev -maxdepth 3 -type d -path "*$1" | head -n1`
    local gopath=`find $GOPATH/src -maxdepth 5 -type d -path "*$1" | head -n1`
  else
    local devpath=`find $DPATH/dev -maxdepth 1 -type d -iname "$1" | head -n1`
    local gopath=`find $GOPATH/src -maxdepth 3 -type d -iname "$1" | head -n1`
  fi

  if [[ ! "$devpath" == "" ]]; then
    cd $devpath
  elif [[ ! "$gopath" == "" ]]; then
    cd $gopath
  else
    echo "$1 dir not found"
    return 1
  fi
}

spoof_mac() {
  # For all those pesky airports with 45 minutes only complimentary access
  # turns off network-manager, spoofs the address and comes back up
  if [ -z "$1" ]
  then
    echo "plz supply your network interface"
    return 1
  fi
  sudo service network-manager stop
  sudo macchanger -r $1
  sudo service network-manager start
  echo "shits spoofed"
}

restore_mac() {
  if [ -z "$1" ]
  then
    echo "plz supply your network interface"
    return 1
  fi
  sudo service network-manager stop
  sudo macchanger -p $1
  sudo service network-manager start
  echo "shits restored"
}

blog-init-post() {
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]
then
  echo "Usage: blog-init-post url-title 'title', 'topic'"
  return 1
fi

DATE=`date "+%Y-%m-%d"`
DATE2=`date "+%Y-%m-%d %H:%M"`
echo $DATE
cat >$DATE-$1.markdown <<EOL
---
layout: post
category: $3
title: "$2"
date: $DATE2
---


EOL
vim +$ +startinsert $DATE-$1.markdown
}

worldtime() {
  let ctr=1
  array=("UTC" "US/Pacific" "America/Toronto" "Asia/Kolkata")
  time=("UTC  " "PST  " "EST  " "India")
  for i in "${array[@]}"; do
    echo -e "${time[$ctr]} \c"
    TZ=":$i" date +%d\ %H:%M
    ctr=$((ctr + 1))
  done
}

check-domain() {
  whois $1 | egrep -q '^No match|^NOT FOUND|^Not fo|AVAILABLE|^No Data Fou|has not been regi|No entri' 
  if [ $? -eq 0 ]; then 
      echo "$1 : available" 
  fi 
}


##################
# FUNCTIONS: GIT #
##################

# Commit and push cause I'm lazy af
git-lazy() {
  if [ -z "$1" ]
  then
    echo "Supply a commit message yo"
    return 1
  fi
  git add .
  git commit -m $1
  git-push
}

# Same thing as above, but create a PR for it too
git-lazy-pr() {
  git add .
  git commit
  git-push
  git-pr $1
}

# Push your branch!!
git-push() {
  BRANCH=`git symbolic-ref --short HEAD`
  echo "Branch: " $BRANCH
  if [ $? -ne 0 ]; then
    echo "Unable to get branch name, is this even a git repo?"
    return 1
  fi

  if [[ "$1" == "-f" ]] 
  then git push -f origin $BRANCH 
  else git push origin $BRANCH
  fi
}

# Create a new branch / checkout from master
git-checkout() {
  if [ -z "$1" ]
  then
    echo "Must provide branch name"
    return 1
  fi

  if [ -z "$2" ]
  then
    echo "Checking out from master"
    git checkout master
    git checkout -b $1
  else
    echo "Checking out from $2"
    git checkout $2
    git checkout -b $1
  fi

}

# Combine the current changes to the last commit
git-update() {
  LAST_COMMIT_MSG=`git show -s --format=%B -1 | cat`
  git add . && git commit -m 'update' && git reset --soft HEAD~2 && git commit -m "$LAST_COMMIT_MSG"
}

# Set the proper upstream remote (add your own fork to origin)
git-set-upstream-remote() {
  echo "Previous remote:"
  git remote -v
  NAME=`echo "${PWD##*/}"`
  UPSTREAM_REPO=`git config --get remote.origin.url | sed -e 's,git://github.com/,,g' | sed -e 's,https://github.com/,,g' | sed -e 's,\.git,,g' | sed -e 's,git@github.com:,,g'`
  git remote remove origin
  git remote add origin git@github.com:$GITHUB_USER/$NAME.git
  git remote add upstream git@github.com:$UPSTREAM_REPO.git
  echo "Remote git's set"
  git remote -v
}

# Set the remote to your own
git-set-remote() {
  echo "Previous remote:"
  git remote -v
  NAME=`echo "${PWD##*/}"`
  git remote remove origin
  git remote add origin git@github.com:$GITHUB_USER/$NAME.git
  echo "Remote git's set"
  git remote -v
}

# Combine the last X commits
git-combine-commit() {
  if [ -z "$1" ]
  then
    echo "Supply the last N commit you want to combine :)"
    return 1
  fi
  # Combine last N commits with last message
  LAST_COMMIT_MSG=`git show -s --format=%B -1 | cat`
  git reset --soft HEAD~$1 && git commit -m "$LAST_COMMIT_MSG"
}

# Sync to the upstream repo (sync masters)
git-sync-upstream() {
  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's,git@github.com:,,g' | sed -e 's/\.git//g'`
  echo "Upstream: " $UPSTREAM_REPO
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi

  BRANCH=`git symbolic-ref --short HEAD`

  # Sync
  echo "\nSyncing master\n"
  git checkout master
  git fetch upstream
  git merge upstream/master

  echo "\nGoing back to original working branch\n"
  # Go back to the original branch
  git checkout $BRANCH

  echo "\nSync completed\n"
}

# Download a commit and patch it to your current branch
git-patch-commit() {
  if [ -z "$1" ]
  then
    echo "Supply the commit yo. ex. https://github.com/foo/bar/commit/9b997db51837dd"
    return 1
  fi
  curl -L -s "${1}.patch"| git am
}


# need to clean this up in the future >.> but fuck it, it works.
# pull's a PR from GitHub / online
git-pull-pr() {
  if [ -z "$1" ]
  then
    echo "Supply the PR yo. ex. https://github.com/project/repo/pull/9 or just 9"
    return 1
  fi

  if [[ $1 == *"https"* ]]
  then
    echo "URL supplied, converting to a numbah";
    NUMBAH=`echo "$1" | grep -E -o "\/[0-9]+" | sed 's,/,,g'`
  else
    NUMBAH=$1
  fi

  # Check that there is a remote upstream set
  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's/git@github.com://g' | sed -e 's/\.git//g'`
  echo "Upstream: " $UPSTREAM_REPO
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi
  git fetch upstream pull/$NUMBAH/head:pr_$NUMBAH && git checkout pr_$NUMBAH
}

# long af
# creates a PR to GitHub
git-pr() {
  if [ -z "$1" ]
  then
    echo "Nothing specified regarding branch, will be pushing to MASTER branch on UPSTREAM repo"
    echo ""
    UPSTREAM_BRANCH="master"
  else
    UPSTREAM_BRANCH=$1
  fi

  BRANCH=`git symbolic-ref --short HEAD`
  if [ -z "$BRANCH" ]; then
    echo "Unable to get branch name, is this even a git repo?"
    return 1
  fi

  ORIGIN_REPO=`git config --get remote.origin.url | sed -e 's/git@github.com://g' | sed 's/\..\{3\}$//'`
  if [ -z "$ORIGIN_REPO" ]; then
    echo "Unable to get remote origin url"
    return 1
  fi

  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's/git@github.com://g' | sed 's/\..\{3\}$//'`
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi

  echo "==== INFO ===="
  echo "Origin: " $ORIGIN_REPO/$BRANCH
  echo "Upstream: " $UPSTREAM_REPO/$UPSTREAM_BRANCH
  echo "=============="


  echo ""
  echo "==== MESSAGE ===="
  export PR="$(git --no-pager log -1 --pretty=%s%n%n%b)"
  echo $PR
  echo "================="
  echo ""

  ask && hub pull-request -b $UPSTREAM_REPO:$UPSTREAM_BRANCH -h $ORIGIN_REPO:$BRANCH -m $PR
}

# Delete's all merged PR branches
git-delete-merged() {
  git branch -r --merged | grep -v master | sed 's/origin\//:/' | xargs -n 1 git push origin
}

#####################
# FUNCTIONS: DOCKER #
#####################

# removes all stoppped, dead, 'created' containers && dangling images
dcleanup(){
  docker rm $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
  docker rm $(docker ps --filter status=created -q 2>/dev/null) 2>/dev/null
  docker rm $(docker ps --filter status=dead -q 2>/dev/null) 2>/dev/null
  docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

# if it relies on another container
relies_on(){
  local containers=$1

  for container in $containers; do
    local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

    if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
      echo "$container is not running, starting it for you."
      $container
    fi
  done
}

del_stopped(){
  name=$1
  state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)
  if [[ "$state" == "false" ]]; then
    docker rm $name
  fi
}


jrl(){
  docker run -it --rm --network=none -v $DPATH/txt/txt.enc:/tmp/txt.enc -v /etc/localtime:/etc/localtime:ro cdrage/jrl
}

creds(){
  docker run -it --rm --network=none -v $DPATH/txt/creds.enc:/tmp/txt.enc -v /etc/localtime:/etc/localtime:ro cdrage/jrl
}

peerflix() {
  magnet=$1
  docker run --rm -it -p 8888:8888 cdrage/peerflix $magnet
}

yubikey() {
  docker run --rm -it \
    --device /dev/bus/usb \
    --device /dev/usb \
    --name ykpersonalize \
    cdrage/ykpersonalize bash
}

# Communication gateways / containers

mutt(){
  docker run -it --rm \
    -e MUTT_NAME=$MUTT_NAME \
    -e MUTT_EMAIL=$MUTT_EMAIL \
    -e MUTT_PASS=$MUTT_PASS \
    -e MUTT_PGP_KEY=$MUTT_PGP_KEY \
    -v $HOME/.gnupg:/home/user/.gnupg \
    -v $DPATH/etc/signature:/home/user/.mutt/signature \
    -v $DPATH/etc/aliases:/home/user/.mutt/aliases \
    -v /etc/localtime:/etc/localtime:ro \
    cdrage/mutt-gmail
}

irc_twitch(){
  del_stopped irc_twitch
  docker run -it \
    -v /etc/localtime:/etc/localtime:ro \
    --name irc_twitch \
    cdrage/weechat \
    -r "/server add twitch irc.twitch.tv -password=$TWITCHOAUTH;/set irc.server.twitch.nicks '$TWITCHUSER';/connect twitch"
}

# Setup background docker containers

setup_k8s_slack() {
  del_stopped irc_slack
  docker run -it \
    -v /etc/localtime:/etc/localtime:ro \
    --name k8s_slack \
    cdrage/weechat \
    -r "/server add slack $K8S_SLACK_HOST/6667 -autoconnect -ssl -ssl_dhkey_size=512 -password=$K8S_SLACK_PASSWORD -username=$K8S_SLACK_USERNAME -nicks=$K8S_SLACK_USERNAME;/connect slack;/join $K8S_SLACK_CHANNELS;/script install buffers.pl;/script install atcomplete.pl;/set weechat.completion.nick_completer '';/set weechat.bar.nicklist.hidden false;/set weechat.bar.nicklist.position right"
}

setup_personal_irc() {
  del_stopped irc
  docker run -it \
    -v /etc/localtime:/etc/localtime:ro \
    --name irc \
    cdrage/weechat \
    -r "/server add $IRC_SERVER $IRC_SERVER_HOST -autoconnect -nicks=$IRC_NICK;/set irc.server.$IRC_SERVER.command \"/msg nickserv identify $IRC_PASSWORD\";/set irc.server.$IRC_SERVER.autojoin \"$IRC_CHANNELS\";/connect $IRC_SERVER;/set weechat.bar.nicklist.position right;/set weechat.bar.nicklist.hidden false;/script install buffers.pl"
}

######################
# SYSTEMD GENERATION #
######################

sysd_coreos() {
  sudo bash -c "cat >/etc/systemd/system/$1.service <<EOL
[Unit]
Description=$1
#After=etcd.service
After=docker.service

[Service]
TimeoutStartSec=0
ExecStartPre=-/usr/bin/docker kill $1
ExecStartPre=-/usr/bin/docker rm $1
#ExecStartPre=-/usr/bin/docker pull $1
ExecStart=/usr/bin/docker run --name $1 
ExecStop=/usr/bin/docker stop $1

[Install]
WantedBy=multi-user.target
EOL"
}

sysd_bin() {
  sudo bash -c "cat >/etc/systemd/system/$1.service <<EOL
[Unit]
Description=$1

[Service]
TimeoutStartSec=0
Restart=on-failure
RestartSec=1min
KillMode=none
ExecStart=/usr/bin/$1

[Install]
WantedBy=multi-user.target
EOL"
}

sysd_usage() {
  echo "Systemd generator"
  echo ""
  echo "Service gen:"
  echo "  coreos [name]"
  echo "  bin [name]"
  return 1
}

sysd_service() {
  if [ -z "$1" ]
  then
    echo "Must provide name of service to be generated"
    return 1
  fi
  # Modify the service file
  sudo vim /etc/systemd/system/$1.service

  # Add it and deploy
  if ask "Would you really like to add this service?"; then
    sudo systemctl daemon-reload
    sudo systemctl enable $1.service
    sudo systemctl start $1.service
  else
    sudo rm /etc/systemd/system/$1.service
  fi
}

sysd() {
  local cmd=$1

  if [[ $cmd == "coreos" ]]; then
    sysd_coreos $2
    sysd_service $2
  elif [[ $cmd == "bin" ]]; then
    sysd_bin $2
    sysd_service $2
  else
    sysd_usage 
  fi

}

###################
# DOTFILES BACKUP #
###################

backup_dotfiles() {
  for file in ~/.{cli,extra,tmux.conf,zshrc}; do
    cp $file $DPATH/dev/linux/dotfiles/
  done
}

backup_config() {
  mkdir -p $DPATH/dev/linux/dotfiles/.config/terminator/
  cp ~/.config/terminator/config $DPATH/dev/linux/dotfiles/.config/terminator/config
}

backup_vim() {
  cp -r ~/.vimrc ~/.vim/colors $DPATH/dev/linux/vim/
  cp -r ~/.vim/mysnippets $DPATH/dev/linux/vim/
}

backup_usage() {
  echo "Backup"
  echo ""
  echo "Usage:"
  echo " backup {all|dotfiles|config|vim}"
}


backup() {
  local cmd=$1

  if [[ $cmd == "dotfiles" ]]; then
    backup_dotfiles
  elif [[ $cmd == "config" ]]; then
    backup_config
  elif [[ $cmd == "vim" ]]; then
    backup_vim
  elif [[ $cmd == "all" ]]; then
    backup_dotfiles
    backup_config
    backup_vim
  else
    backup_usage 
  fi
}

###########
# INSTALL #
###########


install_docker_machine() {
  RELEASE=0.5.0
  echo ""
  echo $RELEASE
  echo ""
  curl -L https://github.com/docker/machine/releases/download/v$RELEASE/docker-machine_linux-amd64.zip >machine.zip && \
    unzip machine.zip && \
    rm machine.zip && \
    sudo mv docker-machine* /usr/local/bin
}

install_docker_compose() {
  RELEASE=1.6.2
  echo ""
  echo $RELEASE
  echo ""
  curl -L https://github.com/docker/compose/releases/download/$RELEASE/docker-compose-Linux-x86_64 > docker-compose
  sudo mv docker-compose /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
}

install_oc() {
  RELEASE="https://github.com/openshift/origin/releases/download/v1.4.1/openshift-origin-client-tools-v1.4.1-3f9807a-linux-64bit.tar.gz"
  echo ""
  echo $RELEASE
  echo ""
  wget $RELEASE -O openshift.tar.gz
  tar -xvf openshift.tar.gz --strip-components=1
  sudo mv oc /usr/local/bin/oc
  rm -r openshift.tar.gz README.md LICENSE
}

install_kubectl() {
  RELEASE=1.5.1
  echo ""
  echo $RELEASE
  echo ""
  wget https://storage.googleapis.com/kubernetes-release/release/v$RELEASE/bin/linux/amd64/kubectl
  sudo mv kubectl /usr/local/bin/kubectl
  sudo chmod +x /usr/local/bin/kubectl
}

install_vim() {
  sudo apt-get install -y vim
  git clone git://github.com/charliedrage/vim.git ~/.vim
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  cp ~/.vim/.vimrc ~/
  vim +PluginInstall +qall
}

install_terminator() {
  sudo apt-get install -y terminator
  mkdir -p ~/.config/terminator
  cp .config/terminator/config ~/.config/terminator/config
}

install_tmux() {
  sudo apt-get install tmux
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  cp .tmux.conf ~/
}

install_docker_master() {

    RELEASE=https://master.dockerproject.org/linux/amd64

    # Master binary
    curl $RELEASE/docker > docker
    sudo mv docker /usr/bin/docker
    sudo chmod +x /usr/bin/docker

    # The rest of the binaries
    # Note: docker = client, dockerd = daemon now...
    array=( dockerd docker-containerd docker-containerd-shim docker-containerd-ctr docker-runc)
    for i in "${array[@]}"
    do
      curl $RELEASE/$i > $i
      sudo mv $i /usr/bin/$i
      sudo chmod +x /usr/bin/$i
    done
}

install_docker() {
  if [[ ! -z $1 ]]; then
    RELEASE=https://get.docker.com/builds/Linux/x86_64/docker-$1.tgz
  else
    RELEASE=https://get.docker.com/builds/Linux/x86_64/docker-latest.tgz
  fi
  echo ""
  echo $RELEASE
  echo ""

  echo "Installs Docker manually on a Debian or RHEL-based operating system"
  echo ""
  echo "Requirements:"
  echo " kernel w/ overlayfs (optional)"
  echo " cgroups"
  echo " iptables NAT module enaled"
  echo ""

  # Make sure :)
  if ! ask; then return 0; fi

  # Prelim
  echo "\n\n-----Installing prelim stuff-----\n\n"
  if [ -f /etc/redhat-release ]; then
    echo "\nRunning on Red Hat-style operating systems\n"
    sudo yum install iptables libcgroup tar xz -y
  else
    echo "\nRunning on Debian/Ubuntu-style operating systems\n"
    sudo apt-get install cgroupfs-mount iptables xz-utils curl -y
  fi
  sudo groupadd docker
  sudo gpasswd -a $USER docker

  # Make sure that there is no Docker on our system. If there is. Remove that shit! 
  # As well as any systemd files
  if [ -f /usr/bin/docker ]; then
    echo "\n\n-----Removing previously installed docker-----\n\n"
    sudo systemctl stop docker || true
    sudo systemctl disable docker || true
    sudo rm /usr/bin/docker
  fi

  # Grab that sweet binary goodness
  echo "\n\n-----Grabbing the Docker binary-----\n\n"

  if [[ $1 == "master" ]]; then
    install_docker_master
  else
    curl $RELEASE > docker.tgz
    tar -xvzf docker.tgz
    sudo mv docker/docker* /usr/bin/
  fi

  echo "\n\n-----Installing SystemD files-----\n\n"
  # SystemD
  sudo bash -c 'cat >/etc/systemd/system/docker.service <<EOL
# https://github.com/docker/docker/blob/master/contrib/init/systemd/docker.service
[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
After=network.target docker.socket
Requires=docker.socket

[Service]
Type=notify
ExecStart=/usr/bin/dockerd --insecure-registry 172.30.0.0/16 --iptables=true -H fd:// 
MountFlags=slave
LimitNOFILE=1048576
LimitNPROC=1048576
LimitCORE=infinity
TimeoutStartSec=0
Delegate=yes

[Install]
WantedBy=multi-user.target
EOL'

  sudo bash -c 'cat >/etc/systemd/system/docker.socket <<EOL
# https://github.com/docker/docker/blob/master/contrib/init/systemd/docker.socket
[Unit]
Description=Docker Socket for the API
PartOf=docker.service

[Socket]
ListenStream=/var/run/docker.sock
SocketMode=0660
SocketUser=root
SocketGroup=docker

[Install]
WantedBy=sockets.target
EOL'

  echo "\n\n-----Enabling via systemctl-----\n\n"
  sudo systemctl daemon-reload
  sudo systemctl enable docker
  sudo systemctl start docker

  echo "\n\n-----Docker version-----\n\n"
  docker version

  echo "\n\n-----Docker ps-----\n\n"
  docker ps

  echo "\n\n-----Removing docker files-----\n\n"
  rm -rf docker.tgz docker


  echo "\nDocker installed!\nAlthough you may need to update your GRUB to enable cgroup memory + swap.\nRun 'install docker-grub'"
}

install_docker_grub() {
  echo "\n\n-----Checking GRUB-----\n\n"
  # Grub stuff for Debian
  if grep -Fxq 'GRUB_CMDLINE_LINUX=""' /etc/default/grub
  then
    sudo sed -i.bak 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"/g' /etc/default/grub
    echo "\nAdded cgroup_enable=memory swapaccount=1 to /etc/default/grub.\nRun update-grub and reboot."
  else
    echo "\nParameters are already located in GRUB_CMDLINE_LINUX. Not updating"
  fi
}

install_dropbox() {
  # Source: https://github.com/janeczku/docker-dropbox
  docker pull janeczku/dropbox
  docker run -d -v $DPATH:/dbox/Dropbox --restart=always --name dropbox janeczku/dropbox
  docker logs -f dropbox
}

install_golang() {
  export GO_VERSION=1.8
  export GO_SRC=/usr/local/go

  # purge old src
  # NOPE.jpeg
  #if [[ -d "$GO_SRC" ]]; then
  #  sudo rm -rf "$GO_SRC"
  #  sudo rm -rf "$GOPATH"
  #fi

  # rm old go
  sudo rm -rf /usr/local/go
  sudo rm -f /usr/bin/go

  echo -e "\n\tInstalling Go $GO_VERSION\n"
  (curl -sSL "https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz" | sudo tar -v -C /usr/local -xz)

  # For sudo / root
  sudo rm -f /usr/bin/go
  sudo ln -s /usr/local/go/bin/go /usr/bin/go
}

install_usage() {
  echo -e "\n\tInstall / Update shit\n"
  echo "Usage:"
  echo "  docker [latest, master, 1.10.1]"
  echo "  docker-machine"
  echo "  docker-compose"
  echo "  docker-grub"
  echo "  oc"
  echo "  kubectl"
  echo "  go"
  echo "  vim"
  echo "  terminator"
  echo "  tmux"
}


install() {
  local cmd=$1

  if [[ $cmd == "docker" ]]; then
    install_docker ${@:2}
  elif [[ $cmd == "docker-machine" ]]; then
    install_docker_machine
  elif [[ $cmd == "docker-compose" ]]; then
    install_docker_compose
  elif [[ $cmd == "docker-grub" ]]; then
    install_docker_grub
  elif [[ $cmd == "oc" ]]; then
    install_oc
  elif [[ $cmd == "kubectl" ]]; then
    install_kubectl
  elif [[ $cmd == "vim" ]]; then
    install_vim
  elif [[ $cmd == "terminator" ]]; then
    install_terminator
  elif [[ $cmd == "tmux" ]]; then
    install_tmux
  elif [[ $cmd == "dropbox" ]]; then
    install_dropbox
  elif [[ $cmd == "go" ]]; then
    install_golang
  elif [[ $cmd == "go" ]]; then
    install_weechat_server
  else
    install_usage
  fi
}

##########
# DEV / CLUSTER ENVIRONMENTS
##########

alias fedora="kvm_ssh fedora25"

# SSH's into a kvm vm
kvm_ssh() {

  # Default values
  VM=$1
  VM_USER=$2
  if [ -z "${VM_USER}" ]; then
    VM_USER="root"
  fi

  # Check the VM is running
  tmp=$(sudo virsh list --all | grep " $VM " | awk '{ print $3}')
  if ([ "x$tmp" == "x" ] || [ "x$tmp" != "xrunning" ])
  then
      echo "$VM: Starting..."
      sudo virsh start $VM &>/dev/null
  else
      echo "$VM: Is running..."
  fi

  # Grab the IP address
  while [ true ]; do
    echo "$VM: Gathering IP..."
    VM_IP=$(for mac in `sudo virsh domiflist $VM |grep -o -E "([0-9a-f]{2}:){5}([0-9a-f]{2})"` ; do arp -e |grep $mac  |grep -o -P "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}" ; done)
    if [ ! -z "${VM_IP}" ]; then
      echo "$VM: $VM_IP"
      break
    fi
    sleep 1
  done

  # Wait until the SSH port is up
  until nc -z $VM_IP 22 &>/dev/null;
  do
      echo "$VM: Waiting for SSH (22)..."
      sleep 1
  done

  # SSH into it
  ssh $VM_USER@$VM_IP
}

dev_usage() {
  echo "Development environments"
  echo ""
  echo "Usage:"
  echo " dev {k8s|os} {up|down|reset}"
  echo ""
}

dev() {
  local cmd=$1

  if [[ $cmd == "k8s" ]]; then
    dev_k8s ${@:2}
  elif [[ $cmd == "os" ]]; then
    dev_openshift ${@:2}
  else
    dev_usage 
  fi
}

dev_k8s(){
  local choice=$1
  K8S_VERSION=1.3.4

  if [ ! -f /usr/bin/kubectl ] && [ ! -f /usr/local/bin/kubectl ]; then
    echo "No kubectl bin exists! Install the bin to continue :)."
    return 1
  fi

  if [[ $choice == "up" ]]; then

    echo "\n-----Launching local k8s cluster-----\n"
    docker run \
      --volume=/:/rootfs:ro \
      --volume=/sys:/sys:ro \
      --volume=/var/lib/docker/:/var/lib/docker:rw \
      --volume=/var/lib/kubelet/:/var/lib/kubelet:rw \
      --volume=/var/run:/var/run:rw \
      --net=host \
      --pid=host \
      --privileged=true \
      --name=kubelet \
      -d \
      gcr.io/google_containers/hyperkube-amd64:v${K8S_VERSION} \
      /hyperkube kubelet \
        --containerized \
        --hostname-override=127.0.0.1 \
        --api-servers=http://localhost:8080 \
        --config=/etc/kubernetes/manifests \
        --cluster-dns=10.0.0.10 \
        --cluster-domain=cluster.local \
        --allow-privileged --v=2

    echo "\n-----Waiting for k8s to initialize-----\n"
    until curl 127.0.0.1:8080 &>/dev/null;
    do
      echo ...
      sleep 1
    done
    echo "\n-----Launched!-----\n"

    echo "\n-----Setting local dev variables-----\n"
    kubectl config set-cluster dev --server=http://localhost:8080
    kubectl config set-context dev --cluster=dev --user=default
    kubectl config use-context dev
    kubectl config set-credentials default --token=foobar

    echo "\n-----Create the kube-system namespace-----\n"
    kubectl create namespace kube-system

    echo "\n-----Ready for development!-----\n"

  elif [[ $choice == "down" ]]; then
    echo "\n-----Removing all namespaces-----\n"
    kubectl delete --all namespaces

    echo "\n-----Remove EVERYTHINGGGG-----\n"
    kubectl get pvc,pv,svc,rc,po --all-namespaces | grep -v 'k8s-\|NAME\|CONTROLLER\|kubernetes' | awk '{print $2}' | xargs --no-run-if-empty kubectl delete pvc,pv,svc,rc,po --grace-period=1 2>/dev/null

    echo "\n-----Waiting for everything to terminate-----\n"
    kubectl get po,svc,rc --all-namespaces
    sleep 3 # give kubectl chance to catch up to api call
    while [ 1 ]
    do
      k8s=`kubectl get po,svc,rc --all-namespaces | grep Terminating`
      if [[ $k8s == "" ]]
      then
        break
      else
        echo "..."
      fi
      sleep 1
    done

    # Run twice due to issue with aufs debian driver
    echo "\n-----Removing all k8s containers-----\n"

    # Remove the initial kubelet
    docker rm -f kubelet

    for run in {0..2}
    do
      docker ps -a | grep 'k8s_' | awk '{print $1}' | xargs --no-run-if-empty docker rm -f
      docker ps -a | grep 'gcr.io/google_containers/hyperkube-amd64' | awk '{print $1}' | xargs --no-run-if-empty docker rm -f
    done

    rm ~/.kube/config

  elif [[ $choice == "clean" ]]; then
    echo "\n-----Cleaning / removing all pods and containers from default namespace-----\n"
    kubectl get pvc,pv,svc,rc,po | grep -v 'k8s-\|NAME\|CONTROLLER\|kubernetes' | awk '{print $1}' | xargs --no-run-if-empty kubectl delete pvc,pv,svc,rc,po --grace-period=1 2>/dev/null

    echo "\n-----Waiting for everything to terminate-----\n"
    kubectl get po,svc,rc
    sleep 3 # give kubectl chance to catch up to api call
    while [ 1 ]
    do
      k8s=`kubectl get po,svc,rc | grep Terminating`
      if [[ $k8s == "" ]]
      then
        break
      else
        echo "..."
      fi
      sleep 1
    done
  
  elif [[ $choice == "restart" ]]; then
    dev_k8s down
    dev_k8s up

  elif [[ $choice == "pv" ]]; then
    mkdir -p /tmp/foobar
    cat <<EOF | kubectl create -f -
apiVersion: v1
kind: PersistentVolume
metadata:
  name: foobar
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Recycle
  hostPath:
    path: /tmp/foobar
EOF

  else
    echo "Kubernetes dev environment"
    echo ""
    echo "Usage:"
    echo " dev_k8s {up|down|restart|clean|gui|dns|pv}"
    echo ""
    echo "Commands:"
    echo " up"
    echo " down"
    echo " restart"
    echo " clean - returns k8s env to a clean slate"
    echo " pv - creates a 20Gb persistent volume named foobar at /tmp/foobar"
  fi
}

dev_openshift(){
  local choice=$1

  if [ ! -f /usr/bin/oc ] && [ ! -f /usr/local/bin/oc ]; then
    echo "No oc bin exists? Please install."
    return 1
  fi

  if [[ $choice == "up" ]]; then
    oc cluster up
  elif [[ $choice == "down" ]]; then
    oc cluster down
    rm ~/.kube/config
  elif [[ $choice == "restart" ]]; then
    dev_openshift down
    dev_openshift up
  else
    echo "OpenShift dev environment"
    echo ""
    echo "Usage:"
    echo " openshift {up|down|restart}"
  fi
}
