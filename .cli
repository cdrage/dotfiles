#!/bin/bash

########## 
# EXPORT #
########## 

# The best editor yo
export EDITOR=nvim

# HIDPI for GTK apps
export GDK_SCALE=2
export GDK_DPI_SCALE=1
export QT_DEVICE_PIXEL_RATIO=2

# UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# History
export HISTSIZE=50000000
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=ignoredups
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"

# Syncthing location
export SPATH=$HOME/syncthing

# Go location
export GOPATH=$SPATH/dev/go
export GOROOT="$(brew --prefix golang)/libexec"
export PATH=$PATH:$GOPATH/bin

###############
# COLOR STUFF #
###############

RED='\033[0;31m'
BLUE='\033[0;36m'
NC='\033[0m'

red() {
  echo -e "$RED$1$NC"
}

blue() {
  echo -e "$BLUE$1$NC"
}

bold() {
  echo -e "\033[1m$1\033[0m"
}

italic() {
  echo -e "\033[3m$1\033[0m"
}

underline() {
  echo -e "\033[4m$1\033[0m"
}


###########
# ALIASES #
###########

alias notes="vim $SPATH/txt/notes.md"
alias devfiles="cd $SPATH/dev/k8s/devfiles"
alias wiki="cd $SPATH/wiki"

# Easier navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"

# Shortcuts
alias g="git"
alias d=gogo # d for dev :)
alias k="kubectl"
alias v="velero"

# ls stuff
colorflag="--color"
alias l="ls -lF ${colorflag}"
alias la="ls -laF ${colorflag}"
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"
alias lsc="ls -l ${colorflag} | awk   '{k=0;for(i=0;i<=8;i++)k+=((substr(\$1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(\"%0o \",k);print}'"
alias ls="command ls ${colorflag}"
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# Use neovim instead
alias vim="nvim"
alias vi="nvim"
alias oldvim="/usr/bin/vim"

# Other
alias sudo='sudo '
alias week='date +%V'
alias pubip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"
alias ips="sudo ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
alias hosts='sudo vim /etc/hosts'
alias untar='tar xvf'
alias battery='upower -i /org/freedesktop/UPower/devices/battery_BAT0'
alias download-audio='yt-dlp -x -f bestaudio --prefer-free-formats -i --output "%(title)s.%(ext)s"'
alias rsync-copy="rsync -avz --progress"

#############
# FUNCTIONS #
#############

shout() {
  echo -e "\n!!!!!!!!!!!!!!!!!!!!\n${1}\n!!!!!!!!!!!!!!!!!!!!\n"
}

pass-gen-http() {
  if [ -z "$1" ]
  then
    echo "plz supply username"
    return 1
  fi

  if [ -z "$2" ]
  then
    echo "plz supply pass"
    return 1
  fi

  pass=`htpasswd -bnBC 10 "" $2 | tr -d ':'`
  echo $1:$pass

}

sed-replace() {
  if [ -z "$3" ]
  then
    find . -type f -name "*.*" -not -path "*/.git/*" -not -path "*/vendor/*" -print0 | xargs -0 sed -i "" "s/$1/$2/g"
  else
    find $3 -type f -name "*.*" -not -path "*/.git/*" -not -path "*/vendor/*" -print0 | xargs -0 sed -i "" "s/$1/$2/g"
  fi
}


# Downloads an entire youtube playlist, may have to use ytd-dl or whatever that is.
youtube-dl-playlist() {
OUT_FORMAT='%(uploader)s/%(title)s.%(ext)s'

yt-dlp \
    --ignore-config                 \
    --ignore-errors                 \
    --no-continue                   \
    --geo-bypass                    \
    --download-archive downloaded   \
    -f bestaudio                    \
    -f m4a                          \
    --max-filesize 128m             \
    --add-metadata                  \
    --prefer-ffmpeg                 \
    --embed-thumbnail               \
    --metadata-from-title '%(artist)s - %(title)s' \
    -o "$OUT_FORMAT"                \
    $1
}


ask() {
    # http://djm.me/ask
    local prompt default REPLY

    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo ""
        blue "$1 "
        blue "[$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read REPLY </dev/tty

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
    echo ""
}

twitch() {
  local result=$1
  if [ -n "$2" ]
  then
    local quality=$2
  else
    local quality="high"
  fi
  export QT_AUTO_SCREEN_SCALE_FACTOR=1
  export QT_SCALE_FACTOR=0.6
  streamlink --twitch-disable-ads twitch.tv/$1 $quality
}

# Dig all?
digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

xkcd() {
  (sort -R /usr/share/dict/words                                   \
 | head -n 4                                                     \
 | awk '{ sub(".", substr(toupper($0),1,1)); printf "%s", $0 }'  \
 ; echo)
}


# go to a folder easily in your gopath
gogo() {
  if [[ $1 == *'/'* ]]; then
    local devpath=`find $SPATH/dev -maxdepth 3 -type d -path "*$1" | head -n1`
    local gopath=`find $GOPATH/src -maxdepth 5 -type d -path "*$1" | head -n1`
  else
    local devpath=`find $SPATH/dev -maxdepth 3 -type d -iname "$1" | head -n1`
    local gopath=`find $GOPATH/src -maxdepth 5 -type d -iname "$1" | head -n1`
  fi

  if [[ ! "$devpath" == "" ]]; then
    cd $devpath
  elif [[ ! "$gopath" == "" ]]; then
    cd $gopath
  else
    echo "$1 dir not found"
    return 1
  fi
}

# Shows worldtime
worldtime() {
  let ctr=1
  array=("UTC" "US/Pacific" "America/Toronto" "Europe/Amsterdam" "Asia/Kolkata")
  time=("UTC  " "PST  " "EST  " "Ams  " "India")
  for i in "${array[@]}"; do
    echo -e "${time[$ctr]} \c"
    TZ=":$i" date +%d\ %H:%M
    ctr=$((ctr + 1))
  done
}

# Check if domain works
check-domain() {
  whois $1 | egrep -q '^No match|^NOT FOUND|^Not fo|AVAILABLE|^No Data Fou|has not been regi|No entri' 
  if [ $? -eq 0 ]; then 
      echo "$1 : available" 
  fi 
}


##################
# FUNCTIONS: GIT #
##################

# Delete all remote branches except for main
git-delete-all-remote-branches-except-main() {
  if ! ask "This will delete ALL branches except main, continue?"; then return 0; fi
  git branch -r | grep origin/ | grep -v 'master$' | grep -v HEAD| cut -d/ -f2 | while read line; do git push origin :$line; done;
}

git-sign() {
  git commit --no-verify --amend --no-edit -s
}

# Clean all files
git-clean() {
  git reset --hard
  git clean -d -f
}

# Add another commit..
git-add() {
  if [ -z "$1" ]
  then
    echo "Supply a message yo"
    return 1
  fi
}


# Commit and push cause I'm lazy af
git-lazy() {
  if [ -z "$1" ]
  then
    echo "Supply a commit message yo"
    return 1
  fi
  git add .
  git commit -m $1 -s --no-verify
  git-push
}

# Same thing as above, but create a PR for it too
git-lazy-pr() {
  git add .
  git-commit-template
  git-push
  git-pr $1
}

# Adds whatever template is used to your commit message...
# obviously if there is a template being used, we should sign it..
# if not, whatever!
git-commit-template() {
  FILE=.github/PULL_REQUEST_TEMPLATE.md
  if [[ -f "$FILE" ]]; then
    CONTENT=`echo "ADD TITLE HERE\n" && cat .github/PULL_REQUEST_TEMPLATE.md`

    # Add the content..
    git commit --no-verify -m $CONTENT
    
    # Then amend it..
    git commit --no-verify --amend -s

  else

    # Else we just do what we normally do! Who cares about the template! But we'll still sign it because why not.
    git commit --no-verify -s
  fi
}

# Push your branch!!
git-push() {
  BRANCH=`git symbolic-ref --short HEAD`
  echo "Branch: " $BRANCH
  if [ $? -ne 0 ]; then
    echo "Unable to get branch name, is this even a git repo?"
    return 1
  fi

  if [[ "$1" == "-f" ]] 
  then git push -f origin $BRANCH 
  else git push origin $BRANCH
  fi
}

# Create a new branch / checkout from main
git-checkout() {
  if [ -z "$1" ]
  then
    echo "Must provide branch name"
    return 1
  fi

  if [ -z "$2" ]
  then
    echo "Checking out from main"
    git checkout main
    git checkout -b $1
  else
    echo "Checking out from $2"
    git checkout $2
    git checkout -b $1
  fi

}

# Combine the current changes to the last commit
git-update() {
  LAST_COMMIT_MSG=`git show -s --format=%B -1 | cat`
  git add . && git commit --no-verify -m 'update' && git reset --soft HEAD~2 && git commit --no-verify -m "$LAST_COMMIT_MSG"
}

# Set the proper upstream remote (add your own fork to origin)
git-set-upstream-remote() {
  echo "Previous remote:"
  git remote -v
  NAME=`echo "${PWD##*/}"`
  UPSTREAM_REPO=`git config --get remote.origin.url | sed -e 's,git://github.com/,,g' | sed -e 's,https://github.com/,,g' | sed -e 's,\.git,,g' | sed -e 's,git@github.com:,,g'`
  git remote remove origin
  git remote add origin git@github.com:$GITHUB_USER/$NAME.git
  git remote add upstream git@github.com:$UPSTREAM_REPO.git
  git remote set-url --push upstream no_push
  echo "Remote git's set"
  git remote -v
}

# Set the remote to your own
git-set-remote() {
  echo "Previous remote:"
  git remote -v
  NAME=`echo "${PWD##*/}"`
  git remote remove origin
  git remote add origin git@github.com:$GITHUB_USER/$NAME.git
  echo "Remote git's set"
  git remote -v
}

# Combine the last X commits
git-combine-commit() {
  if [ -z "$1" ]
  then
    echo "Supply the last N commit you want to combine :)"
    return 1
  fi
  # Combine last N commits with last message
  LAST_COMMIT_MSG=`git show -s --format=%B -1 | cat`
  git reset --soft HEAD~$1 && git commit --no-verify -m "$LAST_COMMIT_MSG"
}

# Sync to the upstream repo (sync main)
git-sync-upstream() {
  MAIN="main"
  if [[ ! -z "$1" ]]
  then
    MAIN=$1
  fi

  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's,git@github.com:,,g' | sed -e 's/\.git//g'`
  echo "Upstream: " $UPSTREAM_REPO
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi

  BRANCH=`git symbolic-ref --short HEAD`

  # Sync
  echo "\nSyncing $MAIN\n"
  git checkout $MAIN
  git fetch upstream
  git merge upstream/${MAIN}

  echo "\nGoing back to original working branch\n"
  # Go back to the original branch
  git checkout $BRANCH

  echo "\nSync completed\n"
}

# Reset a file in the current commit
git-revert-file() {
  if [ "$#" -ne 1 ]; then
    echo "Usage: git_revert_file <file_path>"
    return 1
  fi
  
  file_path=$1

  # Check if the file exists in the current commit
  if ! git ls-files --error-unmatch "$file_path" >/dev/null 2>&1; then
    echo "File does not exist in the current commit."
    return 1
  fi

  # Get the hash of the parent commit
  parent_commit=$(git rev-parse HEAD^)

  if [ $? -ne 0 ]; then
    echo "Failed to find the parent commit."
    return 1
  fi

  # Revert the changes to the file
  git checkout "$parent_commit" -- "$file_path"

  if [ $? -ne 0 ]; then
    echo "Failed to revert the changes to the file."
    return 1
  fi

  echo "Successfully reverted changes to $file_path in the current commit."
}

# Download a commit and patch it to your current branch
git-patch-commit() {
  if [ -z "$1" ]
  then
    echo "Supply the commit yo. ex. https://github.com/foo/bar/commit/9b997db51837dd"
    return 1
  fi
  curl -L -s "${1}.patch"| git am
}


# Git pull from the current branch / get all changes for the branch and merge?
git-pull() {
  BRANCH=`git symbolic-ref --short HEAD`
  git pull origin $BRANCH
}


# need to clean this up in the future >.> but fuck it, it works.
# pull's a PR from GitHub / online
git-pull-pr() {
  if [ -z "$1" ]
  then
    echo "Supply the PR yo. ex. https://github.com/project/repo/pull/9 or just 9"
    return 1
  fi
  gh pr checkout $1
}

# long af
# creates a PR to GitHub
git-pr() {
  if [ -z "$1" ]
  then
    echo "Nothing specified regarding branch, will be pushing to MASTER branch on UPSTREAM repo"
    echo ""
    UPSTREAM_BRANCH="main"
  else
    UPSTREAM_BRANCH=$1
  fi

  BRANCH=`git symbolic-ref --short HEAD`
  if [ -z "$BRANCH" ]; then
    echo "Unable to get branch name, is this even a git repo?"
    return 1
  fi

  ORIGIN_REPO=`git config --get remote.origin.url | sed -e 's/git@github.com://g' | sed 's/\..\{3\}$//'`
  if [ -z "$ORIGIN_REPO" ]; then
    echo "Unable to get remote origin url"
    return 1
  fi

  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's/git@github.com://g' | sed 's/\..\{3\}$//'`
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi

  bold "Origin:  $ORIGIN_REPO/$BRANCH"
  bold "Upstream:  $UPSTREAM_REPO/$UPSTREAM_BRANCH"

  export PR="$(git --no-pager log -1 --pretty=%s%n%n%b)"
  echo ""
  italic $PR
  # Echo $PR to tmp file
  echo "$PR" > /tmp/pr.tmp

  export TITLE="$(git --no-pager log -1 --format=%s)"

  gh pr create --title "$TITLE" --body-file /tmp/pr.tmp -H $GH_USER:$BRANCH -R $UPSTREAM_REPO
}

# Delete's all merged PR branches
git-delete-merged() {
  git branch -r --merged | grep -v main | sed 's/origin\//:/' | xargs -n 1 git push origin
}

# Show all branches last worked on
git-last-worked() {
  git branch --sort="-committerdate" --format="%(color:green)%(committerdate:relative)%(color:reset) %(refname:short)"
}

#####################
# FUNCTIONS: PODMAN #
#####################

jrl(){
  podman run -it --rm --network=none -v $SPATH/enc/txt.enc:/tmp/txt.enc -v /etc/localtime:/etc/localtime:ro cdrage/jrl
}

creds(){
  podman run -it --rm --network=none -v $SPATH/enc/creds.enc:/tmp/txt.enc -v /etc/localtime:/etc/localtime:ro cdrage/jrl
}

#########################
# FUNCTIONS: KUBERNETES #
#########################

k8s_del_terminating_namespace() {
  echo "run kubectl proxy before"
  NAMESPACE=$1
  kubectl get namespace $NAMESPACE -o json |jq '.spec = {"finalizers":[]}' >temp.json
  curl -k -H "Content-Type: application/json" -X PUT --data-binary @temp.json 127.0.0.1:8001/api/v1/namespaces/$NAMESPACE/finalize
  rm temp.json
}

# Deletes ALL terminating pods / clear them. Useful for if a node goes down, etc.
k8s_del_terminating_pods() {
  for p in $(kubectl get pods | grep Terminating | awk '{print $1}'); do kubectl delete pod $p --grace-period=0 --force;done
}

####################
# FUNCTIONS: MACOS #
####################
#
remove_quarantine() {
  xattr -d com.apple.quarantine $1
}

###################
# DOTFILES BACKUP #
###################

backup() {
  shout "Backing up all dotfiles"
  for file in ~/.{cli,extra,zshrc}; do
    cp $file $SPATH/dev/linux/dotfiles/
  done
  cp -r ~/.config/nvim $SPATH/dev/linux/dotfiles/.config/
}


####################
# INSTALL (MAC M1) #
####################

install_copy() {
  # Copy all of the files over first

  cp -r .cli .extra .zshrc ~/
  shout "RESTART YOUR TERMINAL"

  shout "Run install_sudo after"
}
install_sudo() {
	echo "$USER ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers

  shout "Run install_essential after"
}

install_essential() {
	brew install neovim \
    git \
    curl \
    python3 \
    node \
    go \
    kubectl \
    libvirt \
    podman \
    nmap \
    hub \
    tig
  
  shout "Run install_config_files after"
}

install_config_files() {
  # Neovim
  cp -r .config/nvim/ ~/.config/nvim
  sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
         https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  pip3 install neovim
  python3 -m pip install --user --upgrade pynvim

  # Oh my ZSH
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  cp -r .zshrc ~/

  # Install SSH keys
  cp -r $SPATH/etc/keys/ssh/* ~/.ssh/
  chmod 400 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub
  ssh-add
}

install_kompose() {
  RELEASE=1.34.0
  echo ""
  echo $RELEASE
  echo ""
  wget https://github.com/kubernetes/kompose/releases/download/v$RELEASE/kompose-darwin-arm64 -O kompose
  sudo mv kompose /usr/local/bin/kompose
  sudo chmod +x /usr/local/bin/kompose
  kompose version
}


##############
# VM TESTING #
##############


# includes port forwarding 6443 (k8s), (22 to 22 for SSH), and 8080 to 80
arm_raw_test() {
  export DISK_IMAGE=disk.raw
  sudo qemu-system-aarch64 \
    -m 8G \
    -M virt \
    -accel hvf \
    -cpu host \
    -smp 4 \
    -serial mon:stdio \
    -nographic \
    -nic vmnet-shared \
    -netdev user,id=usernet,hostfwd=tcp::8080-:80,hostfwd=tcp::2222-:22,hostfwd=tcp::6443-:6443 \
    -device virtio-net,netdev=usernet \
    -drive file=/opt/homebrew/share/qemu/edk2-aarch64-code.fd,format=raw,if=pflash,readonly=on \
    -drive file=$DISK_IMAGE,if=virtio,cache=writethrough,format=raw
}

# includes port forwarding 6443 (k8s), (22 to 22 for SSH), and 8080 to 80
x86_raw_test() {
  export DISK_IMAGE=disk.raw
  sudo qemu-system-x86_64 \
    -m 8G \
    -cpu Broadwell-v4 \
    -nographic \
    -nic vmnet-shared \
    -netdev user,id=usernet,hostfwd=tcp::8080-:80,hostfwd=tcp::2222-:22,hostfwd=tcp::6443-:6443 \
    -device virtio-net,netdev=usernet \
    -snapshot $DISK_IMAGE
}
