#!/bin/bash

############### 
# EXPORTS
############### 

# The best editor yo
export EDITOR=vim

# HIDPI for GTK apps
export GDK_SCALE=2
export GDK_DPI_SCALE=1
export QT_DEVICE_PIXEL_RATIO=2

# UTF-8
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# History
export HISTSIZE=50000000
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=ignoredups
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"

# Tmux
[[ $TMUX = "" ]] && export TERM="xterm-256color"

# Go
export GOPATH=$HOME/dropbox/dev/go
export GOBIN=$GOPATH/bin
export PATH=/usr/local/bin:/usr/local/go/bin:$PATH:$GOPATH/bin:/sbin

###################
# ALIASES
###################

alias todo="vim ~/dropbox/txt/todo.txt"
alias focus="cat ~/dropbox/txt/focus.txt"
alias agenda="gcalcli agenda 12am 12pm --details description"

# Easier navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"

# Shortcuts
alias dl="cd ~/Downloads"
alias g="git"
alias h="history"
alias d='docker'
alias ta='tmux attach -t'
alias t='tmux'
alias tl='tmux list-sessions'

# ls stuff
colorflag="--color"
alias l="ls -lF ${colorflag}"
alias la="ls -laF ${colorflag}"
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"
alias ls="command ls ${colorflag}"
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# Other
alias sudo='sudo '
alias week='date +%V'
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'
alias pubip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"
alias ips="sudo ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
alias hosts='sudo vim /etc/hosts'
alias untar='tar xvf'
alias battery='upower -i /org/freedesktop/UPower/devices/battery_BAT0'

###################
# FUNCTIONS
###################

twitch() {
  local result=$1
  if [ -n "$2" ]
  then
    local quality=$2
  else
    local quality="high"
  fi
  livestreamer twitch.tv/$1 $quality
}

stream() {
  local url=$1
  peerflix $1 --vlc
}

digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

xkcd() {
  shuf -n5 /usr/share/dict/words | sed -e ':a;N;$!ba;s/\n/ /g;s/'\''//g;s/\b\(.\)/\u\1/g;s/ //g'
}

gogo() {
  cd $GOPATH/src/$1
}

spoof_mac() {
  # For all those pesky airports with 45 minutes only complimentary access
  # turns off network-manager, spoofs the address and comes back up
  if [ -z "$1" ]
  then
    echo "plz supply your network interface"
    return 1
  fi
  sudo service network-manager stop
  sudo macchanger -r $1
  sudo service network-manager start
  echo "shits spoofed"
}

restore_mac() {
  if [ -z "$1" ]
  then
    echo "plz supply your network interface"
    return 1
  fi
  sudo service network-manager stop
  sudo macchanger -p $1
  sudo service network-manager start
  echo "shits restored"
}


###################
# FUNCTIONS: GITHUB
###################

git-push() {
  BRANCH=`git symbolic-ref --short HEAD`
  echo "Branch: " $BRANCH
  if [ $? -ne 0 ]; then
    echo "Unable to get branch name, is this even a git repo?"
    return 1
  fi

  if [[ "$1" == "-f" ]] 
  then git push -f origin $BRANCH 
  else git push origin $BRANCH
  fi
}

# shit only combines commit message not body, TODO
git-update() {
  LAST_COMMIT_MSG=`git show -s --format=%B -1 | cat`
  git add . && git commit -m 'update' && git reset --soft HEAD~2 && git commit -m "$LAST_COMMIT_MSG"
}

# shit only combines commit message not body, TODO
git-combine-commit() {
  if [ -z "$1" ]
  then
    echo "Supply the last N commit you want to combine :)"
    return 1
  fi
  # Combine last N commits with last message
  LAST_COMMIT_MSG=`git show -s --format=%B -1 | cat`
  git reset --soft HEAD~$1 && git commit -m "$LAST_COMMIT_MSG"
}

gh-sync-upstream() {
  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's/git@github.com://g' | sed -e 's/.git//g'`
  echo "Upstream: " $UPSTREAM_REPO
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi
  
  git checkout master
  git fetch upstream
  git merge upstream/master
}

gh-patch-commit() {
  if [ -z "$1" ]
  then
    echo "Supply the commit yo. ex. https://github.com/foo/bar/commit/9b997db51837dd"
    return 1
  fi
  curl -s "${1}.patch"| git am
}


# need to clean this up in the future >.> but fuck it, it works.
gh-pull-pr() {
  if [ -z "$1" ]
  then
    echo "Supply the PR yo. ex. https://github.com/project/repo/pull/9 or just 9"
    return 1
  fi

  if [[ $1 == *"https"* ]]
  then
    echo "URL supplied, converting to a numbah";
    NUMBAH=`echo "$1" | grep -E -o "\/[0-9]+" | sed 's,/,,g'`
  else
    NUMBAH=$1
  fi

  ORIGIN_REPO=`git config --get remote.origin.url | sed -e 's/git@github.com://g' | sed -e 's/.git//g'`
  echo "Origin: " $ORIGIN_REPO
  if [ -z "$ORIGIN_REPO" ]; then
    echo "Unable to get remote origin url"
    return 1
  fi

  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's/git@github.com://g' | sed -e 's/.git//g'`
  echo "Upstream: " $UPSTREAM_REPO
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi

  STATUS=`git status`
  if [[ ! $STATUS == *"nothing to commit, working directory clean"* ]]; then
    echo "Unable to checkout to master, commit your stuff first?"
    return 1
  fi

  BRANCH_NAME=`curl -s "https://api.github.com/repos/${UPSTREAM_REPO}/pulls/${NUMBAH}" | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["head"]["ref"]'`
  USERS_NAME=`curl -s "https://api.github.com/repos/${UPSTREAM_REPO}/pulls/${NUMBAH}" | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["head"]["user"]["login"]'`

  echo "User's name: " $USERS_NAME
  echo "Pull-request: " $NUMBAH
  echo "Pull-request branch name: " $BRANCH_NAME
  echo ""

  git checkout master
  git checkout -b $NUMBAH-$USERS_NAME-$BRANCH_NAME
  curl -s "https://patch-diff.githubusercontent.com/raw/${UPSTREAM_REPO}/pull/${NUMBAH}.patch" | git am
}

gh-pr() {
  if [ -z "$1" ]
  then
    echo "Nothing specified regarding branch, will be pushing to MASTER branch on UPSTREAM repo"
    $UPSTREAM_BRANCH = "master"
  else
    $UPSTREAM_BRANCH = $1
  fi

  BRANCH=`git symbolic-ref --short HEAD`
  if [ -z "$BRANCH" ]; then
    echo "Unable to get branch name, is this even a git repo?"
    return 1
  fi
  echo "Branch: " $BRANCH

  ORIGIN_REPO=`git config --get remote.origin.url | sed -e 's/git@github.com://g' | sed -e 's/.git//g'`
  echo "Origin: " $ORIGIN_REPO
  if [ -z "$ORIGIN_REPO" ]; then
    echo "Unable to get remote origin url"
    return 1
  fi

  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's/git@github.com://g' | sed -e 's/.git//g'`
  echo "Upstream: " $UPSTREAM_REPO
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi

  hub pull-request -b $UPSTREAM_REPO:$UPSTREAM_BRANCH -h $ORIGIN_REPO:$BRANCH
}

#####################
# FUNCTIONS: DOCKER
#####################

# removes all stoppped containers && dangling images
dcleanup(){
  docker rm $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
  docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}


relies_on(){
  local containers=$1

  for container in $containers; do
    local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

    if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
      echo "$container is not running, starting it for you."
      $container
    fi
  done
}

del_stopped(){
  name=$1
  state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)
  if [[ "$state" == "false" ]]; then
    docker rm $name
  fi
}

mutt(){
  docker run -it --rm \
    -e TERM=xterm-256color \
    -e MUTT \
    -e MUTT_NAME \
    -e MUTT_PASS \
    -e MUTT_FROM \
    -e MUTT_SMTP \
    -e MUTT_IMAP \
    -v $HOME/.gnupg:/home/user/.gnupg \
    -v $HOME/dropbox/etc/aliases.txt:/home/user/.mutt/aliases.txt \
    -v /etc/localtime:/etc/localtime:ro \
    $USER/mutt
}

glances(){
  docker run --rm -it -e TERM=xterm-256color --pid=host --ipc=host --net=host --privileged $USER/glances
}

jrl(){
  docker run -it --rm \
    -v $HOME/dropbox/txt/txt.aes:/root/txt.aes \
    -v /etc/localtime:/etc/localtime:ro \
    $USER/jrl
}

peerflix() {
  magnet=$1
  docker run --rm -it -p 8888:8888 $USER/peerflix $magnet
}

irc_twitch(){
  del_stopped irc_twitch
  docker run -it \
    -v /etc/localtime:/etc/localtime:ro \
    --name irc_twitch \
    wikus/weechat \
    -r "/server add twitch irc.twitch.tv -password=$TWITCHOAUTH;/set irc.server.twitch.nicks '$TWITCHUSER';/connect twitch"
}

yubikey() {
  docker run --rm -it \
    --device /dev/bus/usb \
    --device /dev/usb \
    --name ykpersonalize \
    $USER/ykpersonalize bash
}


##########
# DEV / UPDATING 
##########


update_docker_machine() {
  RELEASE=0.5.0
  curl -L https://github.com/docker/machine/releases/download/v$RELEASE/docker-machine_linux-amd64.zip >machine.zip && \
    unzip machine.zip && \
    rm machine.zip && \
    sudo mv docker-machine* /usr/local/bin
}

update_docker_compose() {
  RELEASE=1.5.0
  curl -L https://github.com/docker/compose/releases/download/$RELEASE/docker-compose-Linux-x86_64 > docker-compose
  sudo mv docker-compose /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
}

update_oc() {
  URL="https://github.com/openshift/origin/releases/download/v1.1.0.1/"
  RELEASE="openshift-origin-client-tools-v1.1.0.1-bf56e23-linux-64bit"
  wget $URL$RELEASE.tar.gz -O openshift.tar.gz
  tar -xvf openshift.tar.gz --strip-components=1
  sudo mv oc /usr/local/bin/oc
  rm -r openshift.tar.gz README.md LICENSE
}

k8s(){
  case "$1" in
    up) # Launch and then wait for k8s to initialize on port 8080
      echo "Launching local k8s cluster"
      docker run --net=host -d gcr.io/google_containers/etcd:2.0.9 /usr/local/bin/etcd --addr=127.0.0.1:4001 --bind-addr=0.0.0.0:4001 --data-dir=/var/etcd/data
      docker run --net=host -d -v /var/run/docker.sock:/var/run/docker.sock gcr.io/google_containers/hyperkube:v0.21.2 /hyperkube kubelet --api_servers=http://localhost:8080 --v=2 --address=0.0.0.0 --enable_server --hostname_override=127.0.0.1 --config=/etc/kubernetes/manifests
      docker run -d --net=host --privileged gcr.io/google_containers/hyperkube:v0.21.2 /hyperkube proxy --master=http://127.0.0.1:8080 --v=2
      echo "Waiting for k8s containers to initialize" 
      until nc -z 127.0.0.1 8080;
      do
          echo ...
          sleep 1
      done
      echo "Launched!"
      ;;
    down)
      echo "Removing local k8s cluster"
      docker ps -a | grep 'gcr.io/google_containers' | awk '{print $1}' | xargs --no-run-if-empty docker rm -f
      docker ps -a | grep 'k8s_' | awk '{print $1}' | xargs --no-run-if-empty docker rm -f
      ;;
    restart)
      echo "Removing and restarting local dev cluster"
      k8s down
      k8s up
      ;;
    *)
      echo "Kubernetes dev environment"
      echo "Usage: k8s {up|down|restart}"
  esac
}

openshift(){
  case "$1" in
    up) # Launch and then wait for k8s to initialize on port 8080
      echo "Launching local openshift cluster"
      docker run -d --name "origin" \
        --privileged --pid=host --net=host \
        -v /:/rootfs:ro -v /var/run:/var/run:rw -v /sys:/sys -v /var/lib/docker:/var/lib/docker:rw \
        -v /var/lib/origin/openshift.local.volumes:/var/lib/origin/openshift.local.volumes \
        openshift/origin start
      echo "Waiting for openshift to initialize" 
      until nc -z 127.0.0.1 8443;
      do
          echo ...
          sleep 1
      done
      echo "Launched!"
      echo "Grapping access token"
      API_KEY=`curl -k -L -D - -u openshift:openshift -H 'X-CSRF-Token: 1' 'https://localhost:8443/oauth/authorize?response_type=token&client_id=openshift-challenging-client' 2>&1 | grep -oP "access_token=\K[^&]*"`
      export API_KEY
      echo "Access token: " $API_KEY
      echo "Token exported to API_KEY"
      oc config set-credentials openshift --token=$API_KEY
      oc config set-cluster openshift1 --server=https://localhost:8443 --insecure-skip-tls-verify=true
      oc config set-context openshift --cluster=openshift1 --user=openshift
      oc config use-context openshift
      oc config set contexts.openshift.namespace foo
      oc new-project foo
      ;;
    down)
      echo "Removing local openshift cluster"
      # Remove origin
      docker rm -f origin

      # Remove all kubernetes back-end containers created by origin
      docker ps -a | grep 'gcr.io/google_containers' | awk '{print $1}' | xargs --no-run-if-empty docker rm -f || true
      docker ps -a | grep 'k8s_' | awk '{print $1}' | xargs --no-run-if-empty docker rm -f || true
      ;;
    restart)
      echo "Removing and restarting local dev cluster"
      openshift down
      openshift up
      ;;
    *)
      echo "OpenShift dev environment"
      echo "Usage: openshift {up|down|restart}"
  esac
}
