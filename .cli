#!/bin/bash

########## 
# EXPORT #
########## 

# The best editor yo
export EDITOR=nvim

# HIDPI for GTK apps
export GDK_SCALE=2
export GDK_DPI_SCALE=1
export QT_DEVICE_PIXEL_RATIO=2

# UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# History
export HISTSIZE=50000000
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=ignoredups
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"

# Tmux
[[ $TMUX = "" ]] && export TERM="xterm-256color"

# Seafile location
export SPATH=$HOME/syncthing/files

# Go location
export GOPATH=$SPATH/dev/go
export GOBIN=$GOPATH/bin
export PATH=/usr/local/bin:/usr/local/go/bin:$PATH:$GOPATH/bin:/sbin

# Rust
export PATH="$HOME/.cargo/bin:$PATH"

###############
# COLOR STUFF #
###############

RED='\033[0;31m'
BLUE='\033[0;36m'
NC='\033[0m'

red() {
  echo -e "$RED$1$NC"
}

blue() {
  echo -e "$BLUE$1$NC"
}

bold() {
  echo -e "\033[1m$1\033[0m"
}

italic() {
  echo -e "\033[3m$1\033[0m"
}

underline() {
  echo -e "\033[4m$1\033[0m"
}


###########
# ALIASES #
###########

alias notes="vim $SPATH/txt/notes.md"

# Easier navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"

# Shortcuts
alias g="git"
alias d=gogo # d for dev :)
alias k="kubectl"

# ls stuff
colorflag="--color"
alias l="ls -lF ${colorflag}"
alias la="ls -laF ${colorflag}"
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"
alias ls="command ls ${colorflag}"
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# Use neovim instead
alias vim="nvim"
alias vi="nvim"
alias oldvim="/usr/bin/vim"

# Other
alias sudo='sudo '
alias week='date +%V'
alias pubip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"
alias ips="sudo ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
alias hosts='sudo vim /etc/hosts'
alias untar='tar xvf'
alias battery='upower -i /org/freedesktop/UPower/devices/battery_BAT0'
alias download-audio='youtube-dl -x -f bestaudio --prefer-free-formats -i --output "%(title)s.%(ext)s"'
alias rsync-copy="rsync -avz --progress"

#############
# FUNCTIONS #
#############

shout() {
  echo -e "\n!!!!!!!!!!!!!!!!!!!!\n${1}\n!!!!!!!!!!!!!!!!!!!!\n"
}

pass-gen-http() {
  if [ -z "$1" ]
  then
    echo "plz supply username"
    return 1
  fi

  if [ -z "$2" ]
  then
    echo "plz supply pass"
    return 1
  fi

  pass=`htpasswd -bnBC 10 "" $2 | tr -d ':'`
  echo $1:$pass

}

sed-replace() {
  if [ -z "$3" ]
  then
    find . -type f -name "*.*" -not -path "*/.git/*" -not -path "*/vendor/*" -print0 | xargs -0 sed -i "s%$1%$2%g"
  else
    find $3 -type f -name "*.*" -not -path "*/.git/*" -not -path "*/vendor/*" -print0 | xargs -0 sed -i "s%$1%$2%g"
  fi
}


# Downloads an entire youtube playlist, may have to use ytd-dl or whatever that is.
youtube-dl-playlist() {
OUT_FORMAT='%(uploader)s/%(title)s.%(ext)s'

youtube-dl \
    --ignore-config                 \
    --ignore-errors                 \
    --no-continue                   \
    --geo-bypass                    \
    --download-archive downloaded   \
    -f bestaudio                    \
    -f m4a                          \
    --max-filesize 128m             \
    --add-metadata                  \
    --prefer-ffmpeg                 \
    --embed-thumbnail               \
    --metadata-from-title '%(artist)s - %(title)s' \
    -o "$OUT_FORMAT"                \
    $1
}


ask() {
    # http://djm.me/ask
    local prompt default REPLY

    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo ""
        blue "$1 "
        blue "[$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read REPLY </dev/tty

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
    echo ""
}

twitch() {
  local result=$1
  if [ -n "$2" ]
  then
    local quality=$2
  else
    local quality="high"
  fi
  export QT_AUTO_SCREEN_SCALE_FACTOR=1
  export QT_SCALE_FACTOR=0.6
  streamlink --twitch-disable-ads twitch.tv/$1 $quality
}

# Dig all?
digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

xkcd() {
  shuf -n5 /usr/share/dict/words | sed -e ':a;N;$!ba;s/\n/ /g;s/'\''//g;s/\b\(.\)/\u\1/g;s/ //g'
}


# go to a folder easily in your gopath
gogo() {
  if [[ $1 == *'/'* ]]; then
    local devpath=`find $SPATH/dev -maxdepth 3 -type d -path "*$1" | head -n1`
    local gopath=`find $GOPATH/src -maxdepth 5 -type d -path "*$1" | head -n1`
  else
    local devpath=`find $SPATH/dev -maxdepth 3 -type d -iname "$1" | head -n1`
    local gopath=`find $GOPATH/src -maxdepth 5 -type d -iname "$1" | head -n1`
  fi

  if [[ ! "$devpath" == "" ]]; then
    cd $devpath
  elif [[ ! "$gopath" == "" ]]; then
    cd $gopath
  else
    echo "$1 dir not found"
    return 1
  fi
}

# Only works on linux?
spoof_mac() {
  # For all those pesky airports with 45 minutes only complimentary access
  # turns off network-manager, spoofs the address and comes back up
  if [ -z "$1" ]
  then
    echo "plz supply your network interface"
    return 1
  fi
  sudo service network-manager stop || true
  sudo ifconfig $1 down || true
  sudo macchanger -r $1
  sudo service network-manager start || true
  sudo ifconfig $1 up || true
  echo "shits spoofed"
}

restore_mac() {
  if [ -z "$1" ]
  then
    echo "plz supply your network interface"
    return 1
  fi
  sudo service network-manager stop
  sudo macchanger -p $1
  sudo service network-manager start
  echo "shits restored"
}

# For my site
blog-init-post() {
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]
then
  echo "Usage: blog-init-post url-title 'title', 'topic'"
  return 1
fi

DATE=`date "+%Y-%m-%d"`
DATE2=`date "+%Y-%m-%d %H:%M"`
echo $DATE
cat >$DATE-$1.markdown <<EOL
---
layout: post
category: $3
title: "$2"
date: $DATE2
---


EOL
vim +$ +startinsert $DATE-$1.markdown
}

# Shows worldtime
worldtime() {
  let ctr=1
  array=("UTC" "US/Pacific" "America/Toronto" "Europe/Amsterdam" "Asia/Kolkata")
  time=("UTC  " "PST  " "EST  " "Ams  " "India")
  for i in "${array[@]}"; do
    echo -e "${time[$ctr]} \c"
    TZ=":$i" date +%d\ %H:%M
    ctr=$((ctr + 1))
  done
}

# Check if domain works
check-domain() {
  whois $1 | egrep -q '^No match|^NOT FOUND|^Not fo|AVAILABLE|^No Data Fou|has not been regi|No entri' 
  if [ $? -eq 0 ]; then 
      echo "$1 : available" 
  fi 
}


##################
# FUNCTIONS: GIT #
##################

# Clean all files
git-clean() {
  git reset --hard
  git clean -d -f
}

# Add another commit..
git-add() {
  if [ -z "$1" ]
  then
    echo "Supply a message yo"
    return 1
  fi
}


# Commit and push cause I'm lazy af
git-lazy() {
  if [ -z "$1" ]
  then
    echo "Supply a commit message yo"
    return 1
  fi
  git add .
  git commit -m $1 -s
  git-push
}

# Same thing as above, but create a PR for it too
git-lazy-pr() {
  git add .
  git-commit-template
  git-push
  git-pr $1
}

# Adds whatever template is used to your commit message...
# obviously if there is a template being used, we should sign it..
# if not, whatever!
git-commit-template() {
  FILE=.github/PULL_REQUEST_TEMPLATE.md
  if [[ -f "$FILE" ]]; then
    CONTENT=`echo "ADD TITLE HERE\n" && cat .github/PULL_REQUEST_TEMPLATE.md`

    # Add the content..
    git commit -m $CONTENT
    
    # Then amend it..
    git commit --amend -s

  else

    # Else we just do what we normally do! Who cares about the template! But we'll still sign it because why not.
    git commit -s
  fi
}

# Push your branch!!
git-push() {
  BRANCH=`git symbolic-ref --short HEAD`
  echo "Branch: " $BRANCH
  if [ $? -ne 0 ]; then
    echo "Unable to get branch name, is this even a git repo?"
    return 1
  fi

  if [[ "$1" == "-f" ]] 
  then git push -f origin $BRANCH 
  else git push origin $BRANCH
  fi
}

# Create a new branch / checkout from master
git-checkout() {
  if [ -z "$1" ]
  then
    echo "Must provide branch name"
    return 1
  fi

  if [ -z "$2" ]
  then
    echo "Checking out from master"
    git checkout master
    git checkout -b $1
  else
    echo "Checking out from $2"
    git checkout $2
    git checkout -b $1
  fi

}

# Combine the current changes to the last commit
git-update() {
  LAST_COMMIT_MSG=`git show -s --format=%B -1 | cat`
  git add . && git commit -m 'update' && git reset --soft HEAD~2 && git commit -m "$LAST_COMMIT_MSG"
}

# Set the proper upstream remote (add your own fork to origin)
git-set-upstream-remote() {
  echo "Previous remote:"
  git remote -v
  NAME=`echo "${PWD##*/}"`
  UPSTREAM_REPO=`git config --get remote.origin.url | sed -e 's,git://github.com/,,g' | sed -e 's,https://github.com/,,g' | sed -e 's,\.git,,g' | sed -e 's,git@github.com:,,g'`
  git remote remove origin
  git remote add origin git@github.com:$GITHUB_USER/$NAME.git
  git remote add upstream git@github.com:$UPSTREAM_REPO.git
  git remote set-url --push upstream no_push
  echo "Remote git's set"
  git remote -v
}

# Set the remote to your own
git-set-remote() {
  echo "Previous remote:"
  git remote -v
  NAME=`echo "${PWD##*/}"`
  git remote remove origin
  git remote add origin git@github.com:$GITHUB_USER/$NAME.git
  echo "Remote git's set"
  git remote -v
}

# Combine the last X commits
git-combine-commit() {
  if [ -z "$1" ]
  then
    echo "Supply the last N commit you want to combine :)"
    return 1
  fi
  # Combine last N commits with last message
  LAST_COMMIT_MSG=`git show -s --format=%B -1 | cat`
  git reset --soft HEAD~$1 && git commit -m "$LAST_COMMIT_MSG"
}

# Sync to the upstream repo (sync masters)
git-sync-upstream() {
  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's,git@github.com:,,g' | sed -e 's/\.git//g'`
  echo "Upstream: " $UPSTREAM_REPO
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi

  BRANCH=`git symbolic-ref --short HEAD`

  # Sync
  echo "\nSyncing master\n"
  git checkout master
  git fetch upstream
  git merge upstream/master

  echo "\nGoing back to original working branch\n"
  # Go back to the original branch
  git checkout $BRANCH

  echo "\nSync completed\n"
}

# Download a commit and patch it to your current branch
git-patch-commit() {
  if [ -z "$1" ]
  then
    echo "Supply the commit yo. ex. https://github.com/foo/bar/commit/9b997db51837dd"
    return 1
  fi
  curl -L -s "${1}.patch"| git am
}


# need to clean this up in the future >.> but fuck it, it works.
# pull's a PR from GitHub / online
git-pull-pr() {
  if [ -z "$1" ]
  then
    echo "Supply the PR yo. ex. https://github.com/project/repo/pull/9 or just 9"
    return 1
  fi

  if [[ $1 == *"https"* ]]
  then
    echo "URL supplied, converting to a numbah";
    NUMBAH=`echo "$1" | grep -E -o "\/[0-9]+" | sed 's,/,,g'`
  else
    NUMBAH=$1
  fi

  # Check that there is a remote upstream set
  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's/git@github.com://g' | sed -e 's/\.git//g'`
  echo "Upstream: " $UPSTREAM_REPO
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi
  git checkout master
  git branch -D pr_$NUMBAH
  git fetch upstream pull/$NUMBAH/head:pr_$NUMBAH
  git checkout pr_$NUMBAH
}

# long af
# creates a PR to GitHub
git-pr() {
  if [ -z "$1" ]
  then
    echo "Nothing specified regarding branch, will be pushing to MASTER branch on UPSTREAM repo"
    echo ""
    UPSTREAM_BRANCH="master"
  else
    UPSTREAM_BRANCH=$1
  fi

  BRANCH=`git symbolic-ref --short HEAD`
  if [ -z "$BRANCH" ]; then
    echo "Unable to get branch name, is this even a git repo?"
    return 1
  fi

  ORIGIN_REPO=`git config --get remote.origin.url | sed -e 's/git@github.com://g' | sed 's/\..\{3\}$//'`
  if [ -z "$ORIGIN_REPO" ]; then
    echo "Unable to get remote origin url"
    return 1
  fi

  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's/git@github.com://g' | sed 's/\..\{3\}$//'`
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi

  bold "Origin:  $ORIGIN_REPO/$BRANCH"
  bold "Upstream:  $UPSTREAM_REPO/$UPSTREAM_BRANCH"

  export PR="$(git --no-pager log -1 --pretty=%s%n%n%b)"
  echo ""
  italic $PR

  ask "Push PR?" && hub pull-request -b $UPSTREAM_REPO:$UPSTREAM_BRANCH -h $ORIGIN_REPO:$BRANCH -m $PR
}

# Delete's all merged PR branches
git-delete-merged() {
  git branch -r --merged | grep -v master | sed 's/origin\//:/' | xargs -n 1 git push origin
}

#####################
# FUNCTIONS: DOCKER #
#####################

# removes all stoppped, dead, 'created' containers && dangling images
docker-cleanup(){
  docker rm $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
  docker rm $(docker ps --filter status=created -q 2>/dev/null) 2>/dev/null
  docker rm $(docker ps --filter status=dead -q 2>/dev/null) 2>/dev/null
  docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

# purges ALL images
docker-purge(){
  docker rmi $(docker images -q)
}

# if it relies on another container
relies_on(){
  local containers=$1

  for container in $containers; do
    local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

    if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
      echo "$container is not running, starting it for you."
      $container
    fi
  done
}

del_stopped(){
  name=$1
  state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)
  if [[ "$state" == "false" ]]; then
    docker rm $name
  fi
}


jrl(){
  docker run -it --rm --network=none -v $SPATH/enc/txt.enc:/tmp/txt.enc -v /etc/localtime:/etc/localtime:ro cdrage/jrl
}

creds(){
  docker run -it --rm --network=none -v $SPATH/enc/creds.enc:/tmp/txt.enc -v /etc/localtime:/etc/localtime:ro cdrage/jrl
}

peerflix() {
  magnet=$1
  docker run --rm -it -p 8888:8888 cdrage/peerflix $magnet
}

yubikey() {
  del_stopped ykpersonalize
  docker run --rm -it \
    -v /etc/localtime:/etc/localtime:ro \
    --device /dev/usb \
    --name ykpersonalize \
    jess/ykpersonalize bash
}

# Communication gateways / containers

mutt(){
  docker run -it --rm \
    -e MUTT_NAME=$MUTT_NAME \
    -e MUTT_EMAIL=$MUTT_EMAIL \
    -e MUTT_PASS=$MUTT_PASS \
    -e MUTT_PGP_KEY=$MUTT_PGP_KEY \
    -v $HOME/.gnupg:/home/user/.gnupg \
    -v $SPATH/etc/signature:/home/user/.mutt/signature \
    -v $SPATH/etc/aliases:/home/user/.mutt/aliases \
    -v /etc/localtime:/etc/localtime:ro \
    cdrage/mutt-gmail
}

irc_twitch(){
  del_stopped irc_twitch
  docker run -it \
    -v /etc/localtime:/etc/localtime:ro \
    --name irc_twitch \
    cdrage/weechat \
    -r "/server add twitch irc.twitch.tv -password=$TWITCHOAUTH;/set irc.server.twitch.nicks '$TWITCHUSER';/connect twitch"
}

######################
# SYSTEMD GENERATION #
######################

sysd_coreos() {
  sudo bash -c "cat >/etc/systemd/system/$1.service <<EOL
[Unit]
Description=$1
#After=etcd.service
After=docker.service

[Service]
TimeoutStartSec=0
ExecStartPre=-/usr/bin/docker kill $1
ExecStartPre=-/usr/bin/docker rm $1
#ExecStartPre=-/usr/bin/docker pull $1
ExecStart=/usr/bin/docker run --name $1 
ExecStop=/usr/bin/docker stop $1

[Install]
WantedBy=multi-user.target
EOL"
}

sysd_bin() {
  sudo bash -c "cat >/etc/systemd/system/$1.service <<EOL
[Unit]
Description=$1

[Service]
TimeoutStartSec=0
Restart=on-failure
RestartSec=1min
KillMode=none
ExecStart=/usr/bin/$1

[Install]
WantedBy=multi-user.target
EOL"
}

sysd_usage() {
  echo "Systemd generator"
  echo ""
  echo "Service gen:"
  echo "  coreos [name]"
  echo "  bin [name]"
  return 1
}

sysd_service() {
  if [ -z "$1" ]
  then
    echo "Must provide name of service to be generated"
    return 1
  fi
  # Modify the service file
  sudo vim /etc/systemd/system/$1.service

  # Add it and deploy
  if ask "Would you really like to add this service?"; then
    sudo systemctl daemon-reload
    sudo systemctl enable $1.service
    sudo systemctl start $1.service
  else
    sudo rm /etc/systemd/system/$1.service
  fi
}

sysd() {
  local cmd=$1

  if [[ $cmd == "coreos" ]]; then
    sysd_coreos $2
    sysd_service $2
  elif [[ $cmd == "bin" ]]; then
    sysd_bin $2
    sysd_service $2
  else
    sysd_usage 
  fi

}

###################
# DOTFILES BACKUP #
###################

backup_dotfiles() {
  for file in ~/.{cli,extra,tmux.conf,zshrc}; do
    cp $file $SPATH/dev/linux/dotfiles/
  done
}

backup_config() {
  mkdir -p $SPATH/dev/linux/dotfiles/.config/terminator/

  # Backup terminator / terminal
  cp ~/.config/terminator/config $SPATH/dev/linux/dotfiles/.config/terminator/config

  # Backup neovim
  cp -r ~/.config/nvim $SPATH/dev/linux/dotfiles/.config/
}

backup_scripts() {
  cp -r ~/.scripts $SPATH/dev/linux/dotfiles/.scripts
}

backup_usage() {
  echo "Backup"
  echo ""
  echo "Usage:"
  echo " backup {all|dotfiles|config"
}


backup() {
  local cmd=$1

  if [[ $cmd == "dotfiles" ]]; then
    backup_dotfiles
  elif [[ $cmd == "config" ]]; then
    backup_config
  elif [[ $cmd == "scripts" ]]; then
    backup_scripts
  elif [[ $cmd == "all" ]]; then
    backup_dotfiles
    backup_config
    backup_scripts
  else
    backup_usage 
  fi
}

####################
# INSTALL (DEBIAN) #
####################

install_essential() {
  sudo apt-get install \
    neovim \
    vim \
    curl \
    zsh \
    git \
    tmux \
    terminator \
    python-pip \
    python3-pip \
    silversearcher-ag
    -y
}

install_sudo() {

  TARGET_USER=$1

  apt-get install sudo -y

	adduser "$TARGET_USER" sudo

	gpasswd -a "$TARGET_USER" systemd-journal
	gpasswd -a "$TARGET_USER" systemd-network

	{ \
		echo -e "${TARGET_USER} ALL=(ALL) NOPASSWD:ALL"; \
	} >> /etc/sudoers

  exit

}


install_docker_machine() {
  RELEASE=0.5.0
  echo ""
  echo $RELEASE
  echo ""
  curl -L https://github.com/docker/machine/releases/download/v$RELEASE/docker-machine_linux-amd64.zip >machine.zip && \
    unzip machine.zip && \
    rm machine.zip && \
    sudo mv docker-machine* /usr/local/bin
}

install_docker_compose() {
  RELEASE=1.25.4
  echo ""
  echo $RELEASE
  echo ""
  curl -L https://github.com/docker/compose/releases/download/$RELEASE/docker-compose-Linux-x86_64 > docker-compose
  sudo mv docker-compose /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
}

install_oc() {
  RELEASE="https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz"
  echo ""
  echo $RELEASE
  echo ""
  wget $RELEASE -O openshift.tar.gz
  tar -xvf openshift.tar.gz --strip-components=1
  sudo mv oc /usr/local/bin/oc
  rm openshift.tar.gz README.md LICENSE
}

install_minishift() {
  RELEASE="1.34.2"
  wget https://github.com/minishift/minishift/releases/download/v$RELEASE/minishift-$RELEASE-linux-amd64.tgz -O minishift.tar.gz
  tar -xvf minishift.tar.gz --strip-components=1
  sudo mv minishift /usr/local/bin/minishift
  rm README.adoc LICENSE minishift.tar.gz

  # Install minishift kvm plugin
  sudo curl -L https://github.com/dhiltgen/docker-machine-kvm/releases/download/v0.7.0/docker-machine-driver-kvm -o /usr/local/bin/docker-machine-driver-kvm
  sudo chmod +x /usr/local/bin/docker-machine-driver-kvm
}

install_minikube() {
  RELEASE="1.4.0"
  curl -Lo minikube https://storage.googleapis.com/minikube/releases/v$RELEASE/minikube-linux-amd64
  chmod +x minikube
  sudo mv minikube /usr/local/bin/

  # Install plugin
  curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2 && chmod +x docker-machine-driver-kvm2 && sudo mv docker-machine-driver-kvm2 /usr/local/bin/
}

install_helm() {
  RELEASE="3.1.0"
  curl https://get.helm.sh/helm-v$RELEASE-linux-amd64.tar.gz -o helm.tar.gz
  tar -xvf helm.tar.gz 
  sudo mv linux-amd64/helm /usr/local/bin/helm
  rm -rf helm* linux-amd64
}


install_kubectl() {
  RELEASE=1.17.3
  echo ""
  echo $RELEASE
  echo ""
  wget https://storage.googleapis.com/kubernetes-release/release/v$RELEASE/bin/linux/amd64/kubectl
  sudo mv kubectl /usr/local/bin/kubectl
  sudo chmod +x /usr/local/bin/kubectl
}

install_terminator() {
  mkdir -p ~/.config/terminator
  cp dotfiles/.config/terminator/config ~/.config/terminator/config
  shout "Close this terminal and re-open in 'terminator'"
}

install_tmux() {
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  cp dotfiles/.tmux.conf ~/
}

install_docker() {
  sudo apt-get update
  sudo apt-get install \
     apt-transport-https \
     ca-certificates \
     curl \
     gnupg2 \
     software-properties-common -y
  curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | sudo apt-key add -
  sudo apt-key fingerprint 0EBFCD88
  sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
   $(lsb_release -cs) \
   stable"
  sudo apt-get update
  sudo apt-get install docker-ce -y
  sudo usermod -aG docker $USER

  shout "Updating user permissions without having to re-log.."
  sudo su - $USER
}

install_gnome_shortcuts() {
  gsettings set org.gnome.desktop.wm.preferences resize-with-right-button true
  gsettings set org.gnome.desktop.wm.preferences mouse-button-modifier '<Alt>'
}

install_neovim() {
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	cp -r dotfiles/.config/nvim/ ~/.config/nvim
  sudo pip install neovim
  sudo apt-get install neovim -y
}

install_copy_private() {
  if ! ask "This will override any SSH / PGP keys, continue?"; then return 0; fi
  cp -r $SPATH/etc/keys/ssh/* ~/.ssh/
  chmod 400 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub
  ssh-add

  echo "going to also copy special .extra file"
  cp $SPATH/dev/linux/dotfiles/.extra .
}

install_syncthing() {
  docker run -p 8384:8384 -p 22000:22000 -e PUID=1000 -e PGID=1000 -v ~/syncthing:/var/syncthing --name syncthing \
    --restart=always \
    -d \
    syncthing/syncthing:latest

  echo "Now check localhost:8384 and add all your nodes!"
}

install_golang() {
  export GO_VERSION=1.13
  export GO_SRC=/usr/local/go

  # purge old src
  # NOPE.jpeg
  #if [[ -d "$GO_SRC" ]]; then
  #  sudo rm -rf "$GO_SRC"
  #  sudo rm -rf "$GOPATH"
  #fi

  # rm old go
  sudo rm -rf /usr/local/go
  sudo rm -f /usr/bin/go

  echo -e "\n\tInstalling Go $GO_VERSION\n"
  (curl -sSL "https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz" | sudo tar -v -C /usr/local -xz)

  # For sudo / root
  sudo rm -f /usr/bin/go
  sudo ln -s /usr/local/go/bin/go /usr/bin/go
}

install_usage() {
  echo ""
  echo "Install / Update:"
  echo ""
  echo "First, we need to install sudo:"
  echo " su root"
  echo " source dotfiles/.cli && install sudo USERNAME"
  echo ""
  echo "New machine (in order):"
  echo "  copy"
  echo "  gnome_shortcuts"
  echo "  essential"
  echo "  terminator"
  echo "  zsh"
  echo "  docker"
  echo "  tmux"
  echo "  neovim"
  echo "  syncthing (this will take a LONG time)"
  echo ""
  echo "When syncthing is completed:"
  echo "  copy_private"
  echo "  go"
  echo ""
  echo "Extra Applications:"
  echo "  libvirt"
  echo "  docker-machine"
  echo "  docker-compose"
  echo "  docker-grub"
  echo "  oc"
  echo "  kubectl"
  echo "  minishift"
  echo "  minikube"
  echo "  helm"
}

install_libvirt() {
  sudo apt-get install qemu-kvm libvirt-clients libvirt-daemon-system -y
  sudo adduser $USER libvirt
  sudo adduser $USER libvirt-qemu
  sudo virsh net-autostart default
}

install_copy() {
	cp -r dotfiles/.* .	
	rm -rf .git*
}

install_zsh() {
  sudo apt-get install curl zsh -y
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
}

install() {
  local cmd=$1

  if [[ $cmd == "docker" ]]; then
    install_docker ${@:2}
  elif [[ $cmd == "docker-machine" ]]; then
    install_docker_machine
  elif [[ $cmd == "docker-compose" ]]; then
    install_docker_compose
  elif [[ $cmd == "docker-grub" ]]; then
    install_docker_grub
  elif [[ $cmd == "sudo" ]]; then
    install_sudo ${@:2}
  elif [[ $cmd == "copy" ]]; then
    install_copy
  elif [[ $cmd == "oc" ]]; then
    install_oc
  elif [[ $cmd == "essential" ]]; then
    install_essential
  elif [[ $cmd == "zsh" ]]; then
    install_zsh
  elif [[ $cmd == "gnome_shortcuts" ]]; then
    install_gnome_shortcuts
  elif [[ $cmd == "kubectl" ]]; then
    install_kubectl
  elif [[ $cmd == "vim" ]]; then
    install_vim
  elif [[ $cmd == "neovim" ]]; then
    install_neovim
  elif [[ $cmd == "terminator" ]]; then
    install_terminator
  elif [[ $cmd == "keys" ]]; then
    install_keys
  elif [[ $cmd == "tmux" ]]; then
    install_tmux
  elif [[ $cmd == "syncthing" ]]; then
    install_syncthing
  elif [[ $cmd == "minishift" ]]; then
    install_minishift
  elif [[ $cmd == "go" ]]; then
    install_golang
  else
    install_usage
  fi
}


