#!/bin/bash

############### 
# EXPORTS
############### 

# The best editor yo
export EDITOR=vim

# HIDPI for GTK apps
export GDK_SCALE=2
export GDK_DPI_SCALE=1
export QT_DEVICE_PIXEL_RATIO=2

# UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# History
export HISTSIZE=50000000
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL=ignoredups
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"

# Tmux
[[ $TMUX = "" ]] && export TERM="xterm-256color"

# Dropbox / Home path
export DPATH=$HOME/dropbox

# Go
export GOPATH=$DPATH/dev/go
export GOBIN=$GOPATH/bin
export PATH=/usr/local/bin:/usr/local/go/bin:$PATH:$GOPATH/bin:/sbin


###################
# ALIASES
###################

alias todo="vim $DPATH/txt/todo.txt"
alias focus="cat $DPATH/txt/focus.txt"
alias agenda="gcalcli agenda 12am 12pm --details description"

# Easier navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"

# Shortcuts
alias g="git"
alias d=gogo # d for dev :)

# ls stuff
colorflag="--color"
alias l="ls -lF ${colorflag}"
alias la="ls -laF ${colorflag}"
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"
alias ls="command ls ${colorflag}"
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

# Other
alias sudo='sudo '
alias week='date +%V'
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'
alias pubip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"
alias ips="sudo ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
alias hosts='sudo vim /etc/hosts'
alias untar='tar xvf'
alias battery='upower -i /org/freedesktop/UPower/devices/battery_BAT0'

###################
# FUNCTIONS
###################

twitch() {
  local result=$1
  if [ -n "$2" ]
  then
    local quality=$2
  else
    local quality="high"
  fi
  livestreamer twitch.tv/$1 $quality
}

digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

xkcd() {
  shuf -n5 /usr/share/dict/words | sed -e ':a;N;$!ba;s/\n/ /g;s/'\''//g;s/\b\(.\)/\u\1/g;s/ //g'
}

gogo() {
  if [[ $1 == *'/'* ]]; then
    local devpath=`find $DPATH/dev -maxdepth 3 -type d -path "*$1" | head -n1`
    local gopath=`find $GOPATH/src -maxdepth 5 -type d -path "*$1" | head -n1`
  else
    local devpath=`find $DPATH/dev -maxdepth 1 -type d -iname "$1" | head -n1`
    local gopath=`find $GOPATH/src -maxdepth 3 -type d -iname "$1" | head -n1`
  fi

  if [[ ! "$devpath" == "" ]]; then
    cd $devpath
  elif [[ ! "$gopath" == "" ]]; then
    cd $gopath
  else
    echo "$1 dir not found"
    return 1
  fi
}

spoof_mac() {
  # For all those pesky airports with 45 minutes only complimentary access
  # turns off network-manager, spoofs the address and comes back up
  if [ -z "$1" ]
  then
    echo "plz supply your network interface"
    return 1
  fi
  sudo service network-manager stop
  sudo macchanger -r $1
  sudo service network-manager start
  echo "shits spoofed"
}

restore_mac() {
  if [ -z "$1" ]
  then
    echo "plz supply your network interface"
    return 1
  fi
  sudo service network-manager stop
  sudo macchanger -p $1
  sudo service network-manager start
  echo "shits restored"
}

blog-init-post() {
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]
then
  echo "Usage: blog-init-post url-title 'title', 'topic'"
  return 1
fi

DATE=`date "+%Y-%m-%d"`
DATE2=`date "+%Y-%m-%d %H:%M"`
echo $DATE
cat >$DATE-$1.markdown <<EOL
---
layout: post
category: $3
title: $2
date: $DATE2
---


EOL
vim +$ +startinsert $DATE-$1.markdown
}

worldtime() {
  array=("UTC" "America/Toronto" "Asia/Kolkata")
  for i in "${array[@]}"
  do
    echo $i 
    TZ=":$i" date +%d\ %H:%M
  done
}


###################
# FUNCTIONS: GIT
###################

git-lazy() {
  if [ -z "$1" ]
  then
    echo "Supply a commit message yo"
    return 1
  fi
  git add .
  git commit -m $1
  git-push
}

git-lazy-pr() {
  git add .
  git commit
  git-push
  git-pr
}

git-push() {
  BRANCH=`git symbolic-ref --short HEAD`
  echo "Branch: " $BRANCH
  if [ $? -ne 0 ]; then
    echo "Unable to get branch name, is this even a git repo?"
    return 1
  fi

  if [[ "$1" == "-f" ]] 
  then git push -f origin $BRANCH 
  else git push origin $BRANCH
  fi
}

git-checkout() {
  if [ -z "$1" ]
  then
    echo "Must provide branch name"
    return 1
  fi

  if [ -z "$2" ]
  then
    echo "Checking out from master"
    git checkout master
  fi

  git checkout -b  $1
}

# shit only combines commit message not body, TODO
git-update() {
  LAST_COMMIT_MSG=`git show -s --format=%B -1 | cat`
  git add . && git commit -m 'update' && git reset --soft HEAD~2 && git commit -m "$LAST_COMMIT_MSG"
}

git-set-remote() {
  NAME=`echo "${PWD##*/}"`
  UPSTREAM_REPO=`git config --get remote.origin.url | sed -e 's,git://github.com/,,g' | sed -e 's,https://github.com/,,g' | sed -e 's/.git//g'`
  git remote remove origin
  git remote add origin git@github.com:$GITHUB_USER/$NAME.git
  git remote add upstream git@github.com:$UPSTREAM_REPO.git
  echo "Remote git's set"
  git remote -v
}

# shit only combines commit message not body, TODO
git-combine-commit() {
  if [ -z "$1" ]
  then
    echo "Supply the last N commit you want to combine :)"
    return 1
  fi
  # Combine last N commits with last message
  LAST_COMMIT_MSG=`git show -s --format=%B -1 | cat`
  git reset --soft HEAD~$1 && git commit -m "$LAST_COMMIT_MSG"
}

git-sync-upstream() {
  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's/git@github.com://g' | sed -e 's/.git//g'`
  echo "Upstream: " $UPSTREAM_REPO
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi

  BRANCH=`git symbolic-ref --short HEAD`

  # Sync
  echo "\nSyncing master\n"
  git checkout master
  git fetch upstream
  git merge upstream/master

  echo "\nGoing back to original working branch\n"
  # Go back to the original branch
  git checkout $BRANCH

  echo "\nSync completed\n"
}

git-patch-commit() {
  if [ -z "$1" ]
  then
    echo "Supply the commit yo. ex. https://github.com/foo/bar/commit/9b997db51837dd"
    return 1
  fi
  curl -s "${1}.patch"| git am
}


# need to clean this up in the future >.> but fuck it, it works.
git-pull-pr() {
  if [ -z "$1" ]
  then
    echo "Supply the PR yo. ex. https://github.com/project/repo/pull/9 or just 9"
    return 1
  fi

  if [[ $1 == *"https"* ]]
  then
    echo "URL supplied, converting to a numbah";
    NUMBAH=`echo "$1" | grep -E -o "\/[0-9]+" | sed 's,/,,g'`
  else
    NUMBAH=$1
  fi

  # Check that there is a remote upstream set
  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's/git@github.com://g' | sed -e 's/.git//g'`
  echo "Upstream: " $UPSTREAM_REPO
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi

  git fetch upstream pull/$NUMBAH/head:pr_$NUMBAH && git checkout pr_$NUMBAH
}

git-pr() {
  if [ -z "$1" ]
  then
    echo "Nothing specified regarding branch, will be pushing to MASTER branch on UPSTREAM repo"
    UPSTREAM_BRANCH="master"
  else
    UPSTREAM_BRANCH=$1
  fi

  BRANCH=`git symbolic-ref --short HEAD`
  if [ -z "$BRANCH" ]; then
    echo "Unable to get branch name, is this even a git repo?"
    return 1
  fi
  echo "Branch: " $BRANCH

  ORIGIN_REPO=`git config --get remote.origin.url | sed -e 's/git@github.com://g' | sed -e 's/.git//g'`
  echo "Origin: " $ORIGIN_REPO
  if [ -z "$ORIGIN_REPO" ]; then
    echo "Unable to get remote origin url"
    return 1
  fi

  UPSTREAM_REPO=`git config --get remote.upstream.url | sed -e 's/git@github.com://g' | sed -e 's/.git//g'`
  echo "Upstream: " $UPSTREAM_REPO
  if [ -z "$UPSTREAM_REPO" ]; then
    echo "Unable to get upstream origin url.
    Set a remote upstream via:
    'git remote add upstream git@github.com/username/repo.git'"
    return 1
  fi

  hub pull-request -b $UPSTREAM_REPO:$UPSTREAM_BRANCH -h $ORIGIN_REPO:$BRANCH
}

#####################
# FUNCTIONS: DOCKER
#####################

# removes all stoppped, dead, 'created' containers && dangling images
dcleanup(){
  docker rm $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
  docker rm $(docker ps --filter status=created -q 2>/dev/null) 2>/dev/null
  docker rm $(docker ps --filter status=dead -q 2>/dev/null) 2>/dev/null
  docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}


relies_on(){
  local containers=$1

  for container in $containers; do
    local state=$(docker inspect --format "{{.State.Running}}" $container 2>/dev/null)

    if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
      echo "$container is not running, starting it for you."
      $container
    fi
  done
}

del_stopped(){
  name=$1
  state=$(docker inspect --format "{{.State.Running}}" $name 2>/dev/null)
  if [[ "$state" == "false" ]]; then
    docker rm $name
  fi
}

mutt(){
  docker run -it --rm \
    -e TERM \
    -e MUTT_NAME \
    -e MUTT_EMAIL \
    -e MUTT_PASS \
    -v $HOME/.gnupg:/home/user/.gnupg \
    -v $HOME/dropbox/etc/signature:/home/user/.mutt/signature \
    -v $HOME/dropbox/etc/aliases:/home/user/.mutt/aliases \
    -v /etc/localtime:/etc/localtime:ro \
    $USER/mutt
}

glances(){
  docker run --rm -it -e TERM --pid=host --ipc=host --net=host --privileged $USER/glances
}

jrl(){
  docker run -it --rm -v $HOME/dropbox/txt/txt.enc:/tmp/txt.enc -v /etc/localtime:/etc/localtime:ro $USER/jrl
}

peerflix() {
  magnet=$1
  docker run --rm -it -p 8888:8888 $USER/peerflix $magnet
}

irc_twitch(){
  del_stopped irc_twitch
  docker run -it \
    -e TERM \
    -v /etc/localtime:/etc/localtime:ro \
    --name irc_twitch \
    $USER/weechat \
    -r "/server add twitch irc.twitch.tv -password=$TWITCHOAUTH;/set irc.server.twitch.nicks '$TWITCHUSER';/connect twitch"
}

yubikey() {
  docker run --rm -it \
    --device /dev/bus/usb \
    --device /dev/usb \
    --name ykpersonalize \
    $USER/ykpersonalize bash
}

##########
# SystemD shit
##########

sysd_docker() {
  if [ -z "$1" ]
  then
    echo "Error. Ex usage: sysd_docker ts3"
    return 1
  fi

  sudo bash -c "cat >/etc/systemd/system/$1.service <<EOL
[Unit]
Description=$1
After=docker.service
Requires=docker.service

[Service]
TimeoutStartSec=0
Restart=on-failure
RestartSec=1min
KillMode=none
ExecStartPre=-/usr/bin/docker kill $1
ExecStartPre=-/usr/bin/docker rm $1
ExecStart=/usr/bin/docker run --name $1 
ExecStop=/usr/bin/docker stop $1

[Install]
WantedBy=multi-user.target
EOL"
  sudo vim +13 /etc/systemd/system/$1.service

  echo "/etc/systemd/system/$1.service added"
  sudo systemctl daemon-reload
  sudo systemctl enable /etc/systemd/system/$1.service
  sudo systemctl start /etc/systemd/system/$1.service
}

sysd_usage() {
  echo -e "\n\tSystemd generator\n"
  echo "Usage:"
  echo "  docker [name] [run command (optional)]"
}

sysd() {
  local cmd=$1

  if [[ $cmd == "docker" ]]; then
    sysd_docker ${@:2}
  else
    sysd_usage 
  fi
}

##########
# Backup shit
##########

backup_dotfiles() {
  for file in ~/.{cli,extra,tmux.conf,zshrc}; do
    cp $file $DPATH/dev/dotfiles/
  done
}

backup_config() {
  mkdir -p $DPATH/dev/dotfiles/.config/terminator/
  cp ~/.config/terminator/config $DPATH/dev/dotfiles/.config/terminator/config
}

backup_vim() {
  cp -r ~/.vimrc ~/.vim/colors $DPATH/dev/vim/
}

backup_usage() {
  echo -e "\n\tBackup shit\n"
  echo "Usage:"
  echo "  all"
  echo "  dotfiles"
  echo "  config"
  echo "  vim"
}


backup() {
  local cmd=$1

  if [[ $cmd == "dotfiles" ]]; then
    backup_dotfiles
  elif [[ $cmd == "config" ]]; then
    backup_config_
  elif [[ $cmd == "vim" ]]; then
    backup_vim
  elif [[ $cmd == "all" ]]; then
    backup_dotfiles
    backup_config
    backup_vim
  else
    backup_usage 
  fi
}

##########
# Install shit
##########


install_docker_machine() {
  RELEASE=0.5.0
  curl -L https://github.com/docker/machine/releases/download/v$RELEASE/docker-machine_linux-amd64.zip >machine.zip && \
    unzip machine.zip && \
    rm machine.zip && \
    sudo mv docker-machine* /usr/local/bin
}

install_docker_compose() {
  RELEASE=1.6.2
  curl -L https://github.com/docker/compose/releases/download/$RELEASE/docker-compose-Linux-x86_64 > docker-compose
  sudo mv docker-compose /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
}

install_oc() {
  RELEASE="https://github.com/openshift/origin/releases/download/v1.1.3/openshift-origin-client-tools-v1.1.3-cffae05-linux-64bit.tar.gz"
  wget $RELEASE -O openshift.tar.gz
  tar -xvf openshift.tar.gz --strip-components=1
  sudo mv oc /usr/local/bin/oc
  rm -r openshift.tar.gz README.md LICENSE
}

install_kubectl() {
  RELEASE=1.2.0-beta.1
  wget https://storage.googleapis.com/kubernetes-release/release/v$RELEASE/bin/linux/amd64/kubectl
  sudo mv kubectl /usr/local/bin/
  sudo chmod +x /usr/local/bin/kubectl
}

install_adduser() { 
  if [[ $EUID -ne 0 ]]; then
     echo "This script must be run as root" 1>&2
  fi
  if [[ -z $1 ]]; then
    echo "must provide user as cmd line"
  fi
  apt-get install sudo -y

  mkdir /home/$1
  useradd -d /home/$1 -s /bin/bash $1
  chown $1:users /home/$1
  adduser $1 sudo 
  mkdir /home/$1/.ssh
  cp ~/.ssh/authorized_keys /home/$1/.ssh/
  chown -R $1:$1 /home/$1/.ssh
  { \
    echo -e "$1 ALL=(ALL) NOPASSWD:ALL";
} >> /etc/sudoers
  echo "Remember to passwd the user too"
}

install_vim() {
  sudo apt-get install -y vim
  git clone git://github.com/charliedrage/vim.git ~/.vim
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
  cp ~/.vim/.vimrc ~/
  vim +PluginInstall +qall
}

install_terminator() {
  sudo apt-get install -y terminator
  mkdir -p ~/.config/terminator
  cp .config/terminator/config ~/.config/terminator/config
}

install_tmux() {
  sudo apt-get install tmux
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  cp .tmux.conf ~/
}

install_docker() {
  if [[ $1 == "master" ]]; then
    RELEASE=https://master.dockerproject.org/linux/amd64/docker
  elif [[ ! -z $1 ]]; then
    RELEASE=https://get.docker.com/builds/Linux/x86_64/docker-$1.tgz
  else
    RELEASE=https://get.docker.com/builds/Linux/x86_64/docker-latest.tgz
  fi

  echo "\n\n-----Installing: $RELEASE of Docker-----\n\n"
  echo "\n This installs only versions 1.11 and up since we're using .tar.gz now with the multiple binaries:)\n"
  echo "\n This only works on Debian / Ubuntu distros \n"
  echo "\n Unless you disable selinux on Fedora/CentOS, then it'll work on there too :) \n"

  # Prelim
  echo "\n\n-----Installing prelim stuff-----\n\n"
  if [ -f /etc/redhat-release ]; then
    echo "\nRunning on Red Hat-style operating systems\n"
    sudo yum install iptables libcgroup tar xz -y
  else
    echo "\nRunning on Debian/Ubuntu-style operating systems\n"
    sudo apt-get install cgroupfs-mount iptables xz-utils curl -y
  fi
  sudo groupadd docker
  sudo gpasswd -a $USER docker

  # Make sure that there is no Docker on our system. If there is. Remove that shit! 
  # As well as any systemd files
  if [ -f /usr/bin/docker ]; then
    echo "\n\n-----Removing previously installed docker-----\n\n"
    sudo systemctl stop docker || true
    sudo systemctl disable docker || true
    sudo rm /usr/bin/docker
  fi

  # Grab that sweet binary goodness
  echo "\n\n-----Grabbing the Docker binary-----\n\n"

  curl $RELEASE > docker.tgz
  tar -xvzf docker.tgz
  sudo mv docker/* /usr/bin/

  echo "\n\n-----Installing SystemD files-----\n\n"
  # SystemD
  sudo bash -c 'cat >/etc/systemd/system/docker.service <<EOL
# https://github.com/docker/docker/blob/master/contrib/init/systemd/docker.service
[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
After=network.target docker.socket
Requires=docker.socket

[Service]
Type=notify
ExecStart=/usr/bin/docker daemon -H fd://
MountFlags=slave
LimitNOFILE=1048576
LimitNPROC=1048576
LimitCORE=infinity
TimeoutStartSec=0
Delegate=yes

[Install]
WantedBy=multi-user.target
EOL'

  sudo bash -c 'cat >/etc/systemd/system/docker.socket <<EOL
# https://github.com/docker/docker/blob/master/contrib/init/systemd/docker.socket
[Unit]
Description=Docker Socket for the API
PartOf=docker.service

[Socket]
ListenStream=/var/run/docker.sock
SocketMode=0660
SocketUser=root
SocketGroup=docker

[Install]
WantedBy=sockets.target
EOL'

  echo "\n\n-----Enabling via systemctl-----\n\n"
  sudo systemctl daemon-reload
  sudo systemctl enable docker
  sudo systemctl start docker

  echo "\n\n-----Docker version-----\n\n"
  docker version

  echo "\n\n-----Docker ps-----\n\n"
  docker ps

  echo "\nDocker installed!\nAlthough you may need to update your GRUB to enable cgroup memory + swap.\nRun 'install docker-grub'"
}

install_docker_grub() {
  echo "\n\n-----Checking GRUB-----\n\n"
  # Grub stuff for Debian
  if grep -Fxq 'GRUB_CMDLINE_LINUX=""' /etc/default/grub
  then
    sudo sed -i.bak 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"/g' /etc/default/grub
    echo "\nAdded cgroup_enable=memory swapaccount=1 to /etc/default/grub.\nRun update-grub and reboot."
  else
    echo "\nParameters are already located in GRUB_CMDLINE_LINUX. Not updating"
  fi
}

install_dropbox() {
  docker run -d -e UID=$(id -u) -v ~/.dropbox:/home/.dropbox -v $DPATH:/home/Dropbox --restart=always --name dropbox $USER/dropbox
  sleep 5
  echo "!!!!! Make sure you click the link below then ctrl+c outta there. Afterwards, your dropbox (should) start syncing!!!!!"
  docker logs dropbox
}

install_weechat_server() {
 docker run -it -d \
 -e TERM=xterm-256color \
 -v /etc/localtime:/etc/localtime:ro \
 --name weechat \
 $USER/weechat
 echo "Now 'docker attach weechat'"
}

install_golang() {
  export GO_VERSION=1.6
  export GO_SRC=/usr/local/go

  # purge old src
  if [[ -d "$GO_SRC" ]]; then
    sudo rm -rf "$GO_SRC"
    sudo rm -rf "$GOPATH"
  fi

  echo -e "\n\tInstalling Go $GO_VERSION\n"
  (curl -sSL "https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz" | sudo tar -v -C /usr/local -xz)
}

install_usage() {
  echo -e "\n\tInstall / Update shit\n"
  echo "Usage:"
  echo "  docker [latest, master, 1.10.1]"
  echo "  docker-machine"
  echo "  docker-compose"
  echo "  docker-grub"
  echo "  oc"
  echo "  kubectl"
  echo "  go"
  echo "  adduser (with sudo)"
  echo "  vim"
  echo "  terminator"
  echo "  tmux"
  echo "  weechat (server)"
}


install() {
  local cmd=$1

  if [[ $cmd == "docker" ]]; then
    install_docker ${@:2}
  elif [[ $cmd == "docker-machine" ]]; then
    install_docker_machine
  elif [[ $cmd == "docker-compose" ]]; then
    install_docker_compose
  elif [[ $cmd == "docker-grub" ]]; then
    install_docker_grub
  elif [[ $cmd == "oc" ]]; then
    install_oc
  elif [[ $cmd == "kubectl" ]]; then
    install_kubectl
  elif [[ $cmd == "adduser" ]]; then
    install_adduser ${@:2}
  elif [[ $cmd == "vim" ]]; then
    install_vim
  elif [[ $cmd == "terminator" ]]; then
    install_terminator
  elif [[ $cmd == "tmux" ]]; then
    install_tmux
  elif [[ $cmd == "dropbox" ]]; then
    install_dropbox
  elif [[ $cmd == "go" ]]; then
    install_golang
  elif [[ $cmd == "go" ]]; then
    install_weechat_server
  else
    install_usage
  fi
}

##########
# DEV / CLUSTER ENVIRONMENTS
##########

dev_usage() {
  echo -e "\n\tDev environments\n"
  echo "Usage:"
  echo "  k8s               - single kubernetes cluster"
  echo "  openshift         - single openshift cluster"
}

dev() {
  local cmd=$1

  if [[ $cmd == "k8s" ]]; then
    dev_k8s ${@:2}
  elif [[ $cmd == "openshift" ]]; then
    dev_openshift ${@:2}
  else
    dev_usage 
  fi
}

dev_k8s(){
  local choice=$1
  K8S_VERSION=1.2.0

  if [ ! -f /usr/bin/kubectl ] && [ ! -f /usr/local/bin/kubectl ]; then
    echo "No kubectl bin exists! Install the bin to continue :)."
    return 1
  fi

  if [[ $choice == "up" ]]; then
    echo "\n-----Launching local k8s cluster-----\n"
    docker run \
      --volume=/:/rootfs:ro \
      --volume=/sys:/sys:ro \
      --volume=/var/lib/docker/:/var/lib/docker:rw \
      --volume=/var/lib/kubelet/:/var/lib/kubelet:rw \
      --volume=/var/run:/var/run:rw \
      --net=host \
      --pid=host \
      --privileged=true \
      --name=kubelet \
      -d \
      gcr.io/google_containers/hyperkube-amd64:v${K8S_VERSION} \
      /hyperkube kubelet \
      --containerized \
      --hostname-override="127.0.0.1" \
      --address="0.0.0.0" \
      --api-servers=http://localhost:8080 \
      --config=/etc/kubernetes/manifests \
      --cluster-dns=10.0.0.10 \
      --cluster-domain=cluster.local \
      --allow-privileged=true --v=2

    echo "\n-----Waiting for k8s to initialize-----\n"
    until curl 127.0.0.1:8080 &>/dev/null;
    do
      echo ...
      sleep 1
    done
    echo "\n-----Launched!-----\n"

    echo "\n-----Setting local dev variables-----\n"
    kubectl config set-cluster dev --server=http://localhost:8080
    kubectl config set-context dev --cluster=dev --user=default
    kubectl config use-context dev
    kubectl config set-credentials default --token=foobar

    echo "\n-----Create the kube-system namespace-----\n"
    kubectl create namespace kube-system

    echo "\n-----Ready for development!-----\n"

  elif [[ $choice == "down" ]]; then
    echo "\n-----Removing all namespaces-----\n"
    kubectl delete --all namespaces

    echo "\n-----Remove EVERYTHINGGGG-----\n"
    kubectl get pvc,pv,svc,rc,po --all-namespaces | grep -v 'k8s-\|NAME\|CONTROLLER\|kubernetes' | awk '{print $2}' | xargs --no-run-if-empty kubectl delete pvc,pv,svc,rc,po --grace-period=1 2>/dev/null

    echo "\n-----Waiting for everything to terminate-----\n"
    kubectl get po,svc,rc --all-namespaces
    sleep 3 # give kubectl chance to catch up to api call
    while [ 1 ]
    do
      k8s=`kubectl get po,svc,rc --all-namespaces | grep Terminating`
      if [[ $k8s == "" ]]
      then
        break
      else
        echo "..."
      fi
      sleep 1
    done

    # Run twice due to issue with aufs debian driver
    echo "\n-----Removing all k8s containers-----\n"

    # Remove the initial kubelet
    docker rm -f kubelet

    for run in {0..2}
    do
      docker ps -a | grep 'k8s_' | awk '{print $1}' | xargs --no-run-if-empty docker rm -f
      docker ps -a | grep 'gcr.io/google_containers/hyperkube-amd64' | awk '{print $1}' | xargs --no-run-if-empty docker rm -f
    done

    rm ~/.kube/config

  elif [[ $choice == "clean" ]]; then
    echo "\n-----Cleaning / removing all pods and containers from default namespace-----\n"
    kubectl get pvc,pv,svc,rc,po | grep -v 'k8s-\|NAME\|CONTROLLER\|kubernetes' | awk '{print $1}' | xargs --no-run-if-empty kubectl delete pvc,pv,svc,rc,po --grace-period=1 2>/dev/null

    echo "\n-----Waiting for everything to terminate-----\n"
    kubectl get po,svc,rc
    sleep 3 # give kubectl chance to catch up to api call
    while [ 1 ]
    do
      k8s=`kubectl get po,svc,rc | grep Terminating`
      if [[ $k8s == "" ]]
      then
        break
      else
        echo "..."
      fi
      sleep 1
    done

  elif [[ $choice == "gui" ]]; then
    kubectl create -f "https://raw.githubusercontent.com/kubernetes/kubernetes/release-1.2/cluster/addons/dashboard/dashboard-controller.yaml" --namespace=kube-system
    kubectl create -f "https://raw.githubusercontent.com/kubernetes/kubernetes/release-1.2/cluster/addons/dashboard/dashboard-service.yaml" --namespace=kube-system

  elif [[ $choice == "dns" ]]; then
    # Set the amount of dns replicas and env variables
    export DNS_REPLICAS=1
    export DNS_DOMAIN=cluster.local
    export DNS_SERVER_IP=10.0.0.10

    # Grab the official dns yaml file
    wget http://kubernetes.io/docs/getting-started-guides/docker-multinode/skydns.yaml.in -O skydns.yaml.in
    sed -e "s/{{ pillar\['dns_replicas'\] }}/${DNS_REPLICAS}/g;s/{{ pillar\['dns_domain'\] }}/${DNS_DOMAIN}/g;s/{{ pillar\['dns_server'\] }}/${DNS_SERVER_IP}/g" skydns.yaml.in > ./skydns.yaml

    # Because of https://github.com/kubernetes/kubernetes/issues/23474
    #dns="\ \ \ \ \ \ \ \ - -nameservers=8.8.8.8:53"
    #sed -i "73i$dns" skydns.yaml

    # Deploy!
    kubectl get ns
    kubectl create -f ./skydns.yaml
    rm skydns.yaml*
  
  elif [[ $choice == "restart" ]]; then
    dev_k8s down
    dev_k8s up

  elif [[ $choice == "pv" ]]; then
    mkdir -p /tmp/foobar
    cat <<EOF | kubectl create -f -
apiVersion: v1
kind: PersistentVolume
metadata:
  name: foobar
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Recycle
  hostPath:
    path: /tmp/foobar
EOF

  else
    echo "Kubernetes dev environment"
    echo "\nUsage: "
    echo " dev_k8s {up|down|restart|clean|gui|dns|pv}"
    echo "\nMethods: "
    echo " up"
    echo " down"
    echo " restart"
    echo " clean - returns k8s env to a clean slate"
    echo " gui - ui for k8s at localhost:9090"
    echo " dns - deployment of skydns / name resolution"
    echo " pv - creates a 20Gb persistent volume named foobar at /tmp/foobar"
  fi
}

dev_openshift(){
  local choice=$1

  if [ ! -f /usr/bin/oc ] && [ ! -f /usr/local/bin/oc ]; then
    echo "No oc bin exists? Please install."
    return 1
  fi

  if [[ $choice == "up" ]]; then
    echo "\n-----Launching local openshift cluster-----\n"
    docker run -d --name "origin" \
      --privileged --pid=host --net=host \
      -v /:/rootfs:ro -v /var/run:/var/run:rw -v /sys:/sys -v /var/lib/docker:/var/lib/docker:rw \
      -v /var/lib/origin/openshift.local.volumes:/var/lib/origin/openshift.local.volumes \
      openshift/origin start

    echo "\n-----Initializing containers, please wait-----\n"
    until nc -z 127.0.0.1 8443;
    do
      echo ...
      sleep 1
    done

    echo "\n-----Launched!-----\n"

    # Access token stuff
    echo "\n-----Grabbing access tokens-----\n"
    API_KEY=`curl -k -L -D - -u openshift:openshift -H 'X-CSRF-Token: 1' 'https://localhost:8443/oauth/authorize?response_type=token&client_id=openshift-challenging-client' 2>&1 | grep -oP "access_token=\K[^&]*"`
    export API_KEY
    echo $API_KEY
    echo "Token exported to API_KEY"

    echo "\n-----Setting local dev variables-----\n"
    oc config set-credentials openshift --token=$API_KEY
    oc config set-cluster openshift1 --server=https://localhost:8443 --insecure-skip-tls-verify=true
    oc config set-context openshift --cluster=openshift1 --user=openshift
    oc config use-context openshift
    oc config set contexts.openshift.namespace foo
    sleep 1
    oc new-project foo

    echo "\n-----Ready for development!-----\n"

  elif [[ $choice == "down" ]]; then
    echo "\n-----Removing OpenShift container-----\n"
    docker rm -f origin

    # Remove all kubernetes back-end containers created by origin
    # Ran twice due to Debian aufs "busy" driver issue
    echo "\n-----Removing leftover k8s containers-----\n"
    for run in {0..2}
    do
      docker ps -a | grep 'gcr.io/google_containers/hyperkube' | awk '{print $1}' | xargs --no-run-if-empty docker rm -f
      docker ps -a | grep 'gcr.io/google_containers/etcd' | awk '{print $1}' | xargs --no-run-if-empty docker rm -f
      docker ps -a | grep 'k8s_' | awk '{print $1}' | xargs --no-run-if-empty docker rm -f || true
    done

    rm ~/.kube/config
  elif [[ $choice == "restart" ]]; then
    dev_openshift down
    dev_openshift up
  else
    echo "OpenShift dev environment"
    echo "Usage: openshift {up|down|restart}"
  fi
}
